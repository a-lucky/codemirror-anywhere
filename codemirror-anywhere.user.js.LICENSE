// ==UserScript==

// @name        codemirror-anywhere

// @namespace   http://efcl.info/

// @description codemirror-anywhere

// @include     http://*

// @include     https://*

// @version     1.0.0

// @grant       none

// ==/UserScript==

/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

// CodeMirror, copyright (c) by Marijn Haverbeke and others

// Distributed under an MIT license: https://codemirror.net/LICENSE

// This is CodeMirror (https://codemirror.net), a code editor

// implemented in JavaScript on top of the browser's DOM.

//

// You can find some technical background for some of the code below

// at http://marijnhaverbeke.nl/blog/#cm-internals .

// Kludges for bugs and behavior differences that can't be feature

// detected are enabled based on userAgent etc sniffing.

// Some browsers use the wrong event properties to signal cmd/ctrl on OS X

// wrapper for elt, which removes the elt from the accessibility tree

// IE and Edge may throw an "Unspecified Error" when accessing document.activeElement.

// IE < 10 will throw when accessed while the page is loading or in an iframe.

// IE > 9 and Edge will throw when accessed in an iframe if document.body is unavailable.

// Counts the column offset in a string, taking tabs into account.

// Used mostly to find indentation.

// Number of pixels added to scroller and sizer to hide scrollbar

// Returned or thrown by various protocols to signal 'I'm not

// handling this'.

// The inverse of countColumn -- find the offset that corresponds to

// a particular column.

// Extending unicode characters. A series of a non-extending char +

// any number of extending chars is treated as a single unit as far

// as editing and measuring is concerned. This is not fully correct,

// since some scripts/fonts/browsers also treat other configurations

// of code points as a group.

// Returns a number from the range [`0`; `str.length`] unless `pos` is outside that range.

// Returns the value from the range [`from`; `to`] that satisfies

// `pred` and is closest to `from`. Assumes that at least `to`

// satisfies `pred`. Supports `from` being greater than `to`.

// At any point we are certain `to` satisfies `pred`, don't know

// whether `from` does.

// The display handles the DOM integration, both for input reading

// and content drawing. It holds references to DOM nodes and

// display-related state.

// Covers bottom-right square when both scrollbars are present.

// Covers bottom of gutter when coverGutterNextToScrollbar is on

// and h scrollbar is present.

// Will contain the actual code, positioned to cover the viewport.

// Elements are added to these to represent selection and cursors.

// A visibility: hidden element used to find the size of things.

// When lines outside of the viewport are measured, they are drawn in this.

// Wraps everything that needs to exist inside the vertically-padded coordinate system

// Moved around its parent to cover visible view.

// Set to the height of the document, allowing scrolling.

// Behavior of elts with overflow: auto and padding is

// inconsistent across browsers. This is used to ensure the

// scrollable area is big enough.

// Will contain the gutters, if any.

// Actual scrollable element.

// The element in which the editor lives.

// Work around IE7 z-index bug (not perfect, hence IE7 not really being supported)

// Current rendered range (may be bigger than the view window).

// Information about the rendered lines.

// Holds info about a single rendered line when it was rendered

// for measurement, while not in view.

// Empty space (in pixels) above the view

// Used to only resize the line number gutter when necessary (when

// the amount of lines crosses a boundary that makes its width change)

// Set to true when a non-horizontal-scrolling line widget is

// added. As an optimization, line widget aligning is skipped when

// this is false.

// Tracks the maximum line length so that the horizontal scrollbar

// can be kept static when scrolling.

// Used for measuring wheel scrolling granularity

// True when shift is held down.

// Used to track whether anything happened since the context menu

// was opened.

// Find the line object corresponding to the given line number.

// Get the part of a document between two positions, as an array of

// strings.

// Get the lines between from and to, as array of strings.

// iter aborts when callback returns truthy value

// Update the height of a line, propagating the height change

// upwards to parent nodes.

// Given a line object, find its line number by walking up through

// its parent links.

// Find the line at the given vertical position, using the height

// information in the document tree.

// A Pos instance represents a position within the text.

// Compare two positions, return 0 if they are the same, a negative

// number when a is less, and a positive number otherwise.

// Most of the external API clips given positions to make sure they

// actually exist within the document.

// Optimize some code when these features are not used.

// TEXTMARKER SPANS

// Search an array of spans for a span matching the given marker.

// Remove a span from an array, returning undefined if no spans are

// left (we don't store arrays for lines without spans).

// Add a span to a line.

// Given a change object, compute the new set of marker spans that

// cover the line in which the change took place. Removes spans

// entirely within the change, reconnects spans belonging to the

// same marker that appear on both sides of the change, and cuts off

// spans partially within the change. Returns an array of span

// arrays with one element for each line in (after) the change.

// Used for the algorithm that adjusts markers for a change in the

// document. These functions cut an array of spans at a given

// character position, returning an array of remaining chunks (or

// undefined if nothing remains).

// Get the spans that 'stick out' on both sides

// Fix up .to properties of first

// Fix up .from in last (or move them into first in case of sameLine)

// Make sure we didn't create any zero-length spans

// Fill gap with whole-line-spans

// Remove spans that are empty and don't have a clearWhenEmpty

// option of false.

// Used to 'clip' out readOnly ranges when making a change.

// Connect or disconnect spans from a line.

// Helpers used when computing which overlapping collapsed span

// counts as the larger one.

// Returns a number indicating which of two overlapping collapsed

// spans is larger (and thus includes the other). Falls back to

// comparing ids when the spans cover exactly the same range.

// Find out whether a line ends or starts in a collapsed span. If

// so, return the marker for that span.

// Test whether there exists a collapsed span that partially

// overlaps (covers the start or end, but not both) of a new span.

// Such overlap is not allowed.

// A visual line is a line as drawn on the screen. Folding, for

// example, can cause multiple logical lines to appear on the same

// visual line. This finds the start of the visual line that the

// given line is part of (usually that is the line itself).

// Get the line number of the start of the visual line that the

// given line number is part of.

// Get the line number of the start of the next visual line after

// the given line.

// Compute whether a line is hidden. Lines count as hidden when they

// are part of a visual line that starts with another line, or when

// they are entirely covered by collapsed, non-widget span.

// Find the height above the given line.

// Compute the character length of a line, taking into account

// collapsed ranges (see markText) that might hide parts, and join

// other lines onto it.

// Find the longest line in the document.

// BIDI HELPERS

// Bidirectional ordering algorithm

// See http://unicode.org/reports/tr9/tr9-13.html for the algorithm

// that this (partially) implements.

// One-char codes used for character types:

// L (L):   Left-to-Right

// R (R):   Right-to-Left

// r (AL):  Right-to-Left Arabic

// 1 (EN):  European Number

// + (ES):  European Number Separator

// % (ET):  European Number Terminator

// n (AN):  Arabic Number

// , (CS):  Common Number Separator

// m (NSM): Non-Spacing Mark

// b (BN):  Boundary Neutral

// s (B):   Paragraph Separator

// t (S):   Segment Separator

// w (WS):  Whitespace

// N (ON):  Other Neutrals

// Returns null if characters are ordered as they appear

// (left-to-right), or an array of sections ({from, to, level}

// objects) in the order in which they occur visually.

// Character types for codepoints 0 to 0xff

// Character types for codepoints 0x600 to 0x6f9

// W1. Examine each non-spacing mark (NSM) in the level run, and

// change the type of the NSM to the type of the previous

// character. If the NSM is at the start of the level run, it will

// get the type of sor.

// W2. Search backwards from each instance of a European number

// until the first strong type (R, L, AL, or sor) is found. If an

// AL is found, change the type of the European number to Arabic

// number.

// W3. Change all ALs to R.

// W4. A single European separator between two European numbers

// changes to a European number. A single common separator between

// two numbers of the same type changes to that type.

// W5. A sequence of European terminators adjacent to European

// numbers changes to all European numbers.

// W6. Otherwise, separators and terminators change to Other

// Neutral.

// W7. Search backwards from each instance of a European number

// until the first strong type (R, L, or sor) is found. If an L is

// found, then change the type of the European number to L.

// N1. A sequence of neutrals takes the direction of the

// surrounding strong text if the text on both sides has the same

// direction. European and Arabic numbers act as if they were R in

// terms of their influence on neutrals. Start-of-level-run (sor)

// and end-of-level-run (eor) are used at level run boundaries.

// N2. Any remaining neutrals take the embedding direction.

// Here we depart from the documented algorithm, in order to avoid

// building up an actual levels array. Since there are only three

// levels (0, 1, 2) in an implementation that doesn't take

// explicit embedding into account, we can build up the order on

// the fly, without following the level-based algorithm.

// Get the bidi ordering for the given line (and cache it). Returns

// false for lines that are fully left-to-right, and an array of

// BidiSpan objects otherwise.

// EVENT HANDLING

// Lightweight event framework. on/off also work on DOM nodes,

// registering native DOM handlers.

/*, values...*/

// The DOM events that CodeMirror handles can be overridden by

// registering a (non-DOM) handler on the editor for the event name,

// and preventDefault-ing the event in that handler.

// Add on and off methods to a constructor's prototype, to make

// registering events on such objects more convenient.

// Due to the fact that we still support jurassic IE versions, some

// compatibility wrappers are needed.

// Detect drag-and-drop

// There is *some* kind of drag-and-drop support in IE6-8, but I

// couldn't get it to work yet.

// Feature-detect IE's crummy client rect reporting for bidi text

// Safari returns null in some cases (#2780)

// See if "".split is the broken IE version, if so, provide an

// alternative way to split lines.

// Given a MIME type, a {name, ...options} config object, or a name

// string, return a mode config object.

// Given a mode spec (anything that resolveMode accepts), find and

// initialize an actual mode object.

// This can be used to attach properties to mode objects from

// outside the actual mode definition.

// Given a mode and a state (for that mode), find the inner mode and

// state at the position that the state refers to.

// STRING STREAM

// Fed to the mode parsers, provides helper functions to make

// parsers more succinct.

// Compute a style array (an array starting with a mode generation

// -- for invalidation -- followed by pairs of end positions and

// style strings), which is used to highlight the tokens on the

// line.

// A styles array always starts with a number identifying the

// mode/overlays that it is based on (for easy invalidation).

// Compute the base array of styles

// Ensure there's a token end at the current position, and that i points at it

// Run overlays, adjust style array.

// Finds the line to start with when starting a parse. Tries to

// find a line with a stateAfter, so that it can start with a

// valid state. If that fails, it returns the line with the

// smallest indentation, which tends to need the least context to

// parse correctly.

// Lightweight form of highlight -- proceed over this line and

// update state, but don't save a style array. Used for lines that

// aren't currently visible.

// Utility for getTokenAt and getLineTokens

// Run the given mode's parser over a line, calling f for each token.

// Webkit seems to refuse to render text nodes longer than 57444

// characters, and returns inaccurate measurements in nodes

// starting around 5000 chars.

// LINE DATA STRUCTURE

// Line objects. These hold state related to a line, including

// highlighting info (the styles array).

// Detach a line from the document tree and its markers.

// Convert a style as returned by a mode (either null, or a string

// containing one or more styles) to a CSS style. This is cached,

// and also looks for line-wide styles.

// Render the DOM representation of the text of a line. Also builds

// up a 'line map', which points at the DOM nodes that represent

// specific stretches of text, and is used by the measuring code.

// The returned object contains the DOM node, this map, and

// information about line-wide styles that were set by the mode.

// The padding-right forces the element to have a 'border', which

// is needed on Webkit to be able to get line-level bounding

// rectangles for it (in measureChar).

// Iterate over the logical lines that make up this visual line.

// Optionally wire in some hacks into the token-rendering

// algorithm, to deal with browser quirks.

// Ensure at least a single node is present, for measuring.

// Store the map and a cache object for the current logical line

// See issue #2901

// Build up the DOM representation for a single token, and add it to

// the line map. Takes care to render special characters separately.

// Change some spaces to NBSP to prevent the browser from collapsing

// trailing spaces at the end of a line when rendering text (issue #1362).

// Work around nonsense dimensions being reported for stretches of

// right-to-left text.

// Find the part that overlaps with the start of this text

// Outputs a number of spans to make up a line, taking highlighting

// and marked text into account.

// Update current marker set

// support for the old title property

// https://github.com/codemirror/CodeMirror/pull/5673

// These objects are used to represent the visible (currently drawn)

// part of the document. A LineView may correspond to multiple

// logical lines, if those are connected by collapsed ranges.

// The starting line

// Continuing lines, if any

// Returns an array of logical lines that continue the visual line

// started by the argument, or undefined if there are no such lines.

// Number of logical lines in this visual line

// Create a range of LineView objects for the given lines.

// Often, we want to signal events at a point where we are in the

// middle of some work, but don't want the handler to start calling

// other methods on the editor, which might be in an inconsistent

// state or simply not expect any other events to happen.

// signalLater looks whether there are any handlers, and schedules

// them to be executed when the last operation ends, or, if no

// operation is active, when a timeout fires.

// When an aspect of a line changes, a string is added to

// lineView.changes. This updates the relevant part of the line's

// DOM structure.

// Lines with gutter elements, widgets or a background class need to

// be wrapped, and have the extra elements added to the wrapper div

// Wrapper around buildLineContent which will reuse the structure

// in display.externalMeasured when possible.

// Redraw the line's text. Interacts with the background and text

// classes because the mode may output tokens that influence these

// classes.

// Build a line's DOM representation from scratch

// A lineView may contain multiple logical lines (when merged by

// collapsed spans). The widgets for all of them need to be drawn.

// Return true when the given mouse event happened in a widget

// POSITION MEASUREMENT

// Ensure the lineView.wrapping.heights array is populated. This is

// an array of bottom offsets for the lines that make up a drawn

// line. When lineWrapping is on, there might be more than one

// height.

// Find a line map (mapping character offsets to text nodes) and a

// measurement cache for the given line number. (A line view might

// contain multiple lines when collapsed ranges are present.)

// Render a line into the hidden node display.externalMeasured. Used

// when measurement is needed for a line that's not in the viewport.

// Get a {top, bottom, left, right} box (in line-local coordinates)

// for a given character.

// Find a line view that corresponds to the given line number.

// Measurement can be split in two steps, the set-up work that

// applies to the whole line, and the measurement of the actual

// character. Functions like coordsChar, that need to do a lot of

// measurements in a row, can thus ensure that the set-up work is

// only done once.

// Given a prepared measurement object, measures the position of an

// actual character (or fetches it from the cache).

// If it is a text node, use a range to retrieve the coordinates.

// Retry a maximum of 4 times when nonsense rectangles are returned

// Work around problem with bounding client rects on ranges being

// returned incorrectly when zoomed on IE10 and below.

// Known modes, by name and by MIME

// If it is a widget, simply get the box for the whole widget.

// First, search the line map for the text node corresponding to,

// or closest to, the target character.

// Work around https://bugs.chromium.org/p/chromium/issues/detail?id=489206

// which causes page_Offset and bounding client rects to use

// different reference viewports and invalidate our calculations.

// Converts a {top, bottom, left, right} box from line-local

// coordinates into another coordinate system. Context may be one of

// "line", "div" (display.lineDiv), "local"./null (editor), "window",

// or "page".

// Coverts a box from "div" coords to another coordinate system.

// Context may be "window", "page", "div", or "local"./null.

// First move into "page" coordinate system

// Returns a box for a given cursor position, which may have an

// 'other' property containing the position of the secondary cursor

// on a bidi boundary.

// A cursor Pos(line, char, "before") is on the same visual line as `char - 1`

// and after `char - 1` in writing order of `char - 1`

// A cursor Pos(line, char, "after") is on the same visual line as `char`

// and before `char` in writing order of `char`

// Examples (upper-case letters are RTL, lower-case are LTR):

//     Pos(0, 1, ...)

//     before   after

// ab     a|b     a|b

// aB     a|B     aB|

// Ab     |Ab     A|b

// AB     B|A     B|A

// Every position after the last character on a line is considered to stick

// to the last character on the line.

// Used to cheaply estimate the coordinates for a position. Used for

// intermediate scroll updates.

// Positions returned by coordsChar contain some extra information.

// xRel is the relative x position of the input coordinates compared

// to the found position (so xRel > 0 means the coordinates are to

// the right of the character position, for example). When outside

// is true, that means the coordinates lie outside the line's

// vertical range.

// Compute the character position closest to the given coordinates.

// Input must be lineSpace-local ("div" coordinate system).

// Returns true if the given side of a box is after the given

// coordinates, in top-to-bottom, left-to-right order.

// Move y into line-local coordinate space

// When directly calling `measureCharPrepared`, we have to adjust

// for the widgets at this line.

// If the line isn't plain left-to-right text, first figure out

// which bidi section the coordinates fall into.

// In a wrapped line, rtl text on wrapping boundaries can do things

// that don't correspond to the ordering in our `order` array at

// all, so a binary search doesn't work, and we want to return a

// part that only spans one line so that the binary search in

// coordsCharInner is safe. As such, we first find the extent of the

// wrapped line, and then do a flat search in which we discard any

// spans that aren't on the line.

// Clip the part to the wrapped line.

// Bidi parts are sorted left-to-right, and in a non-line-wrapping

// situation, we can take this ordering to correspond to the visual

// ordering. This finds the first part whose end is after the given

// coordinates.

// If this isn't the first part, the part's start is also after

// the coordinates, and the coordinates aren't on the same line as

// that start, move one part back.

// The awkward -1 offsets are needed because findFirst (called

// on these below) will treat its first bound as inclusive,

// second as exclusive, but we want to actually address the

// characters in the part's range

// A binary search to find the first character whose bounding box

// starts after the coordinates. If we run across any whose box wrap

// the coordinates, store that.

// If a box around the coordinates was found, use that

// Distinguish coordinates nearer to the left or right side of the box

// (Adjust for extended bound, if necessary.)

// To determine which side to associate with, get the box to the

// left of the character and compare it's vertical position to the

// coordinates

// Now get accurate coordinates for this place, in order to get a

// base X position

// Compute the default text height.

// Measure a bunch of lines, for browsers that compute

// fractional heights.

// Compute the default character width.

// Do a bulk-read of the DOM positions and sizes needed to draw the

// view, so that we don't interleave reading and writing to the DOM.

// Computes display.scroller.scrollLeft + display.gutters.offsetWidth,

// but using getBoundingClientRect to get a sub-pixel-accurate

// result.

// Returns a function that estimates the height of a line, to use as

// first approximation until the line becomes visible (and is thus

// properly measurable).

// Given a mouse event, find the corresponding position. If liberal

// is false, it checks whether a gutter or scrollbar was clicked,

// and returns null if it was. forRect is used by rectangular

// selections, and tries to estimate a character position even for

// coordinates beyond the right of the text.

// Fails unpredictably on IE[67] when mouse is dragged around quickly.

// Find the view element corresponding to a given line. Return null

// when the line isn't visible.

// Draws a cursor for the given range

// Secondary cursor, shown when on a 'jump' in bi-directional text

// Draws the given range as a highlighted selection

// Single line

// Multiple lines

// Cursor-blinking

// This test prevents this from firing when a context

// menu is closed (since the input reset would kill the

// select-all detection hack)

// Read the actual heights of the rendered lines, and update their

// stored heights to match.

// Check that lines don't extend past the right of the current

// editor width

// Read and store the height of line widgets associated with the

// given line.

// Compute the lines that are visible in a given viewport (defaults

// the the current scroll position). viewport may contain top,

// height, and ensure (see op.scrollToPos) properties.

// Ensure is a {from: {line, ch}, to: {line, ch}} object, and

// forces those lines into the viewport (if possible).

// Re-align line numbers and gutter marks to compensate for

// horizontal scrolling.

// Used to ensure that the line number gutter is still the right

// size for the current document size. Returns true when an update

// is needed.

// SCROLLING THINGS INTO VIEW

// If an editor sits on the top or bottom of the window, partially

// scrolled out of view, this ensures that the cursor is visible.

// Calculate a new scroll position needed to scroll the given

// rectangle into view. Returns an object with scrollTop and

// scrollLeft properties. When these are undefined, the

// vertical/horizontal position does not need to be adjusted.

// Store a relative adjustment to the scroll position in the current

// operation (to be applied when the operation finishes).

// Make sure that at the end of the operation the current cursor is

// shown.

// When an operation has its scrollToPos property set, and another

// scroll action is applied before the end of the operation, this

// 'simulates' scrolling that position into view in a cheap way, so

// that the effect of intermediate scroll commands is not ignored.

// Sync the scrollable area and scrollbars, ensure the viewport

// covers the visible area.

// Sync scroller and scrollbar, ensure the gutter elements are

// aligned.

// SCROLLBARS

// Prepare DOM reads needed to update the scrollbars. Done in one

// shot to minimize update/measure roundtrips.

// Need to set a minimum width to see the scrollbar on IE7 (but must not set it on IE8).

// A bug in IE8 can cause this value to be negative, so guard it.

// To find out whether the scrollbar is still visible, we

// check whether the element under the pixel in the bottom

// right corner of the scrollbar box is the scrollbar box

// itself (when the bar is still visible) or its filler child

// (when the bar is hidden). If it is still visible, we keep

// it enabled, if it's hidden, we disable pointer events.

// Re-synchronize the fake scrollbars with the actual size of the

// content.

// Prevent clicks in the scrollbars from killing focus

// Operations are used to wrap a series of changes to the editor

// state in such a way that each change won't have to update the

// cursor and display (which would be awkward, slow, and

// error-prone). Instead, display updates are batched and then all

// combined and executed at once.

// Start a new operation.

// Flag that indicates that lines might need to be redrawn

// Used to detect need to update scrollbar

// Used to force a redraw

// Whether to reset the input textarea

// Whether this reset should be careful to leave existing text (for compositing)

// Accumulated changes, for firing change events

// Set of handlers to fire cursorActivity on

// Tracks which cursorActivity handlers have been called already

// Whether the selection needs to be redrawn

// Set when the widest line needs to be determined anew

// Intermediate scroll position, not pushed to DOM yet

// Used to scroll to a specific position

// Finish an operation, updating the display and signalling delayed events

// Calls delayed callbacks and cursorActivity handlers until no

// new ones appear

// The DOM updates done when an operation finishes are batched so

// that the minimum number of relayouts are required.

// If the max line changed since it was last measured, measure it,

// and ensure the document's width matches it.

// updateDisplay_W2 will use these properties to do the actual resizing

// If we need to scroll a specific position into view, do so.

// Abort mouse wheel delta measurement, when scrolling explicitly

// Propagate the scroll position to the actual DOM scroller

// Scroll a given position into view (immediately), verifying that

// it actually became visible (as line heights are accurately

// measured, the position of something may 'drift' during drawing).

// Set pos and end to the cursor positions around the character pos sticks to

// If pos.sticky == "before", that is around pos.ch - 1, otherwise around pos.ch

// If pos == Pos(_, 0, "before"), pos and end are unchanged

// Scroll a given set of coordinates into view (immediately).

// Fire events for markers that are hidden/unidden by editing or

// undoing

// Fire change events, and delayed event handlers

// Run the given function in an operation

// Wraps a function in an operation. Returns the wrapped function.

// Used to add methods to editor and doc instances, wrapping them in

// operations.

// Updates the display.view data structure for a given change to the

// document. From and to are in pre-change coordinates. Lendiff is

// the amount of lines added or subtracted by the change. This is

// used for changes that span multiple lines, or change the way

// lines are divided into visual lines. regLineChange (below)

// registers single-line changes.

// Change after

// Change before

// Full overlap

// Top overlap

// Bottom overlap

// Gap in the middle

// Register a change to a single line. Type must be one of "text",

// "gutter", "class", "widget"

// Clear the view.

// Force the view to cover a given range, adding empty view element

// or clipping off existing ones as needed.

// Count the number of lines in the view whose DOM representation is

// out of date (or nonexistent).

// HIGHLIGHT WORKER

// Visible

// DISPLAY DRAWING

// Store some values that we'll need later (but don't want to force a relayout for)

// Does the actual updating of the line display. Bails out

// (returning false) when there is nothing to be done and forced is

// false.

// Bail out if the visible area is already rendered and nothing changed.

// Compute a suitable new viewport (from & to)

// Position the mover div to align with the current scroll position

// For big changes, we hide the enclosing element during the

// update, since that speeds up the operations on most browsers.

// Sync the actual display DOM structure with display.view, removing

// nodes for lines that are no longer in view, and creating the ones

// that are not there yet, and updating the ones that are out of

// date.

// Works around a throw-scroll bug in OS X Webkit

// Loop over the elements in the view, syncing cur (the DOM nodes

// in display.lineDiv) with the view as we go.

// Already drawn

// Not drawn yet

// There might have been a widget with a focused element that got

// hidden or updated, if so re-focus it.

// Prevent selection and cursors from interfering with the scroll

// width and height.

// Clip forced viewport to actual scrollable area.

// Updated line heights might result in the drawn area not

// actually covering the viewport. Keep looping until it does.

// Rebuild the gutter elements, ensure the margin to the left of the

// code matches their width.

// Make sure the gutters options contains the element

// "CodeMirror-linenumbers" when the lineNumbers option is true.

// Since the delta values reported on mouse wheel events are

// unstandardized between browsers and even browser versions, and

// generally horribly unpredictable, this code starts by measuring

// the scroll effect that the first few mouse wheel events have,

// and, from that, detects the way it can convert deltas to pixel

// offsets afterwards.

// The reason we want to know the amount a wheel event will scroll

// is that it gives us a chance to update the display before the

// actual scrolling happens, reducing flickering.

// Fill in a browser-detected starting value on browsers where we

// know one. These don't have to be accurate -- the result of them

// being wrong would just be a slight flicker on the first wheel

// scroll (if it is large enough).

// Webkit browsers on OS X abort momentum scrolls when the target

// of the scroll event is removed from the scrollable element.

// This hack (see related code in patchDisplay) makes sure the

// element is kept around.

// On some browsers, horizontal scrolling will cause redraws to

// happen before the gutter has been realigned, causing it to

// wriggle around in a most unseemly way. When we have an

// estimated pixels/delta value, we just handle horizontal

// scrolling entirely here. It'll be slightly off from native, but

// better than glitching out.

// Abort measurement, if in progress

// Only prevent default scrolling if vertical scrolling is

// actually possible. Otherwise, it causes vertical scroll

// jitter on OSX trackpads when deltaX is small and deltaY

// is large (issue #3579)

// 'Project' the visible viewport to cover the area that is being

// scrolled into view (if we know enough to estimate it).

// Selection objects are immutable. A new one is created every time

// the selection changes. A selection is one or more non-overlapping

// (and non-touching) ranges, sorted, and an integer that indicates

// which one is the primary selection (the one that's scrolled into

// view, that getCursor returns, etc).

// Take an unsorted, potentially overlapping set of ranges, and

// build a selection out of it. 'Consumes' ranges array (modifying

// it).

// Compute the position of the end of a change (its 'to' property

// refers to the pre-change end).

// Adjust a position to refer to the post-change position of the

// same text, or the end of the change if the change covers it.

// Used by replaceSelections to allow moving the selection to the

// start or around the replaced test. Hint may be "start" or "around".

// Used to get the editor into a consistent state again when options change.

// DOCUMENT DATA STRUCTURE

// By default, updates that start and end at the beginning of a line

// are treated specially, in order to make the association of line

// widgets and marker elements with the text behave more intuitive.

// Perform a change on the document data structure.

// Change the content (text, markers) of a line. Automatically

// invalidates cached information and tries to re-estimate the

// line's height.

// Adjust the line structure

// This is a whole-line replace. Treated specially to make

// sure line objects move the way they are supposed to.

// Call f for all linked documents.

// Attach a document to an editor.

// Arrays of change events and selections. Doing something adds an

// event to done and clears undo. Undoing moves events from done

// to undone, redoing moves them in the other direction.

// Used to track when changes can be merged into a single undo

// event

// Used by the isClean() method

// Create a history change event from an updateDoc-style change

// object.

// Pop all selection events off the end of a history array. Stop at

// a change event.

// Find the top change event in the history. Pop off selection

// events that are in the way.

// Register a change in the history. Merges changes that are within

// a single operation, or are close together with an origin that

// allows merging (starting with "+") into a single event.

// Merge this change into the last event

// Optimized case for simple insertion -- don't want to add

// new changesets for every character typed

// Add new sub-event

// Can not be merged, start a new event.

// Called whenever the selection changes, sets the new selection as

// the pending selection in the history, and pushes the old pending

// selection into the 'done' array when it was significantly

// different (in number of selected ranges, emptiness, or time).

// A new event is started when the previous origin does not match

// the current, or the origins don't allow matching. Origins

// starting with * are always merged, those starting with + are

// merged when similar and close together in time.

// Used to store marked span information in the history.

// When un/re-doing restores text containing marked spans, those

// that have been explicitly cleared should not be restored.

// Retrieve and filter the old marked spans stored in a change event.

// Used for un/re-doing changes from the history. Combines the

// result of computing the existing spans with the set of spans that

// existed in the history (so that deleting around a span and then

// undoing brings back the span).

// Used both to provide a JSON-safe object in .getHistory, and, when

// detaching a document, to split the history in two

// The 'scroll' parameter given to many of these indicated whether

// the new cursor position should be scrolled into view after

// modifying the selection.

// If shift is held or the extend flag is set, extends a range to

// include a given position (and optionally a second position).

// Otherwise, simply returns the range between the given positions.

// Used for cursor motion and such.

// Extend the primary selection range, discard the rest.

// Extend all selections (pos is an array of selections with length

// equal the number of selections)

// Updates a single range in the selection.

// Reset the selection to a single range.

// Give beforeSelectionChange handlers a change to influence a

// selection update.

// Set a new selection.

// Verify that the selection does not partially select any atomic

// marked ranges.

// Return a selection that does not partially select any atomic

// ranges.

// Ensure a given position is not inside an atomic range.

// UPDATING

// Allow "beforeChange" event handlers to influence a change

// Apply a change to a document, and add it to the document's

// history, and propagating it to all linked documents.

// Possibly split or suppress the update based on the presence

// of read-only spans in its range.

// Revert a change stored in a document's history.

// Build up a reverse change object to add to the opposite history

// stack (redo when undoing, and vice versa).

// Propagate to the linked documents

// Sub-views need their line numbers shifted when text is added

// above or below them in the parent document.

// More lower-level change function, handling only a single document

// (not linked ones).

// Clip the change to the size of this doc

// Handle the interaction of a change to a document with the editor

// that this document is part of.

// change is on 3

// state on line 1 looked ahead 2 -- so saw 3

// test 1 + 2 < 3 should cover this

// Remember that these lines changed, for updating the display

// Rebasing/resetting history to deal with externally-sourced changes

// Tries to rebase an array of history events given a change in the

// document. If the change touches the same lines as the event, the

// event, and everything 'behind' it, is discarded. If the change is

// before the event, the event's positions are updated. Uses a

// copy-on-write scheme for the positions, to avoid having to

// reallocate them all on every rebase, but also avoid problems with

// shared position objects being unsafely updated.

// Utility for applying a change to a line by handle or number,

// returning the number and optionally registering the line as

// changed.

// The document is represented as a BTree consisting of leaves, with

// chunk of lines in them, and branches, with up to ten leaves or

// other branch nodes below them. The top node is always a branch

// node, and is the document object itself (meaning it has

// additional methods and properties).

// All nodes have parent links. The tree is used both to go from

// line numbers to line objects, and to go from objects to numbers.

// It also indexes by height, and is used to convert between height

// and line object, and to find the total height of the document.

// See also http://marijnhaverbeke.nl/blog/codemirror-line-tree.html

// Remove the n lines at offset 'at'.

// Helper used to collapse a small branch into a single leaf.

// Insert the given array of lines at offset 'at', count them as

// having the given height.

// Used to iterate over a part of the tree.

// If the result is smaller than 25 lines, ensure that it is a

// single leaf node.

// To avoid memory thrashing when child.lines is huge (e.g. first view of a large file), it's never spliced.

// Instead, small slices are taken. They're taken in order because sequential memory accesses are fastest.

// When a node has grown, check whether it should be split.

// Become the parent node

// Line widgets are block elements displayed above or below a line.

// TEXTMARKERS

// Created with markText and setBookmark methods. A TextMarker is a

// handle that can be used to clear or find a marked position in the

// document. Line objects hold arrays (markedSpans) containing

// {from, to, marker} object pointing to such marker objects, and

// indicating that such a marker is present on that line. Multiple

// lines may point to the same marker when it spans across lines.

// The spans will have null for their from/to properties when the

// marker continues beyond the start/end of the line. Markers have

// links back to the lines they currently touch.

// Collapsed markers have unique ids, in order to be able to order

// them, which is needed for uniquely determining an outer marker

// when they overlap (they may nest, but not partially overlap).

// Create a marker, wire it up to the right lines, and

// Shared markers (across linked documents) are handled separately

// (markTextShared will call out to this again, once per

// document).

// Ensure we are in an operation.

// Don't connect empty markers unless clearWhenEmpty is false

// Showing up as a widget implies collapsed (widget replaces text)

// lineIsHidden depends on the presence of the spans, so needs a second pass

// Sync editor state

// SHARED TEXTMARKERS

// A shared marker spans multiple linked documents. It is

// implemented as a meta-marker-object controlling multiple normal

// markers.

// Clear the marker.

// Find the position of the marker in the document. Returns a {from,

// to} object by default. Side can be passed to get a specific side

// -- 0 (both), -1 (left), or 1 (right). When lineObj is true, the

// Pos objects returned contain a line object, rather than a line

// number (used to prevent looking up the same line twice).

// Signals that the marker's widget changed, and surrounding layout

// should be recomputed.

// Iterate over the document. Supports two forms -- with only one

// argument, it calls that for each line in the document. With

// three, it iterates over the range given by the first two (with

// the second being non-inclusive).

// Non-public interface for adding and removing lines.

// From here, the methods are part of the public interface. Most

// are also available from CodeMirror (editor) instances.

// iter aborts when callback returns a truthy value

// If the histories were shared, split them again

// Public alias.

// Kludge to work around strange IE behavior where it'll sometimes

// re-fire a series of drag-related events right after the drop (#1551)

// Might be a file drop, in which case we simply extract the text

// and insert it.

// Normal drop

// Don't do a replace if the drop happened inside of the selected text.

// Ensure the editor is re-focused

// These must be handled carefully, because naively registering a

// handler for each editor will cause the editors to never be

// garbage collected.

// Called when the window resizes

// When the window loses focus, we want to show the editor as blurred

// Might be a text scaling operation, clear size caches.

// Number keys

// Alphabetic keys

// Function keys

// KEYMAP DISPATCH

// This is a kludge to keep keymaps mostly working as raw objects

// (backwards compatibility) while at the same time support features

// like normalization and multi-stroke key bindings. It compiles a

// new normalized keymap, and then updates the old object to reflect

// this.

// Modifier key presses don't count as 'real' key presses for the

// purpose of keymap fallthrough.

// Look up the name of a key as indicated by an event object.

// Ctrl-ScrollLock has keyCode 3, same as Ctrl-Pause,

// so we'll use event.code when available (Chrome 48+, FF 38+, Safari 10.1+)

// Helper for deleting text near the selection(s), used to implement

// backspace, delete, and similar functionality.

// Build up a set of ranges to kill first, merging overlapping

// Next, remove those actual ranges.

// With a wrapped rtl chunk (possibly spanning multiple bidi parts),

// it could be that the last bidi part is not on the last visual line,

// since visual lines contain content order-consecutive chunks.

// Thus, in rtl, we are looking for the first (content-order) character

// in the rtl chunk that is on the last line (that is, the same line

// as the last (content-order) character).

// Note that the save and find-related commands aren't defined by

// default. User code or addons can define them. Unknown commands

// are simply ignored.

// Very basic readline/emacs-style bindings, which are standard on Mac.

// Commands are parameter-less actions that can be performed on an

// editor, mostly used for keybindings.

// Swap the two chars left and right of each selection's head.

// Move cursor behind the two swapped characters afterwards.

// Doesn't consider line feeds a character.

// Doesn't scan more than one line above to find a character.

// Doesn't do anything on an empty line.

// Doesn't do anything with non-empty selections.

// Run a handler that was bound to a key.

// Ensure previous input has been read, so that the handler sees a

// consistent view of the document

// Note that, despite the name, this function is also used to check

// for bound mouse clicks.

// Handle a key from the keydown event.

// Handle a key from the keypress event

// IE does strange things with escape.

// Opera has no cut event... we try to at least catch the key combo

// Turn mouse into crosshair when Alt is held on Mac.

// Some browsers fire keypress events for backspace

// A mouse down can be a single click, double click, triple click,

// start of selection drag, start of text drag, new cursor

// (ctrl-click), rectangle drag (alt-drag), or xwin

// middle-click-paste. Or it might be a click on something we should

// not interfere with, such as a scrollbar or widget.

// Briefly turn off draggability, to allow widgets to do

// normal dragging things.

// #3261: make sure, that we're not starting a second selection

// Start a text drag. When it ends, see if any dragging actually

// happen, and treat as a click if it didn't.

// Work around unexplainable focus problem in IE9 (#2127) and Chrome (#3081)

// Let the drag handler handle this.

// IE's approach to draggable

// Normal selection, as opposed to text dragging.

// Used when mouse-selecting to adjust the anchor to the proper side

// of a bidi jump depending on the visual position of the head.

// Compute the relative visual position of the head compared to the

// anchor (<0 is to the left, >0 to the right)

// Determines whether an event happened in the gutter, and fires the

// handlers for the corresponding event.

// Used to ensure timeout re-tries don't fire when another extend

// happened in the meantime (clearTimeout isn't reliable -- at

// least on Chrome, the timeouts still happen even when cleared,

// if the clear happens after their scheduled firing time).

// CONTEXT MENU HANDLING

// To make the context menu work, we need to briefly unhide the

// textarea (making it as unobtrusive as possible) to let the

// right-click take effect on it.

// A CodeMirror instance represents an editor. This is the object

// that user code is usually dealing with.

// Determine effective options based on given values and defaults.

// stores maps added by addKeyMap

// highlighting overlays, as added by addOverlay

// bumped when mode/overlay changes, used to invalidate highlighting info

// used to disable editing during key handlers when in readOnly mode

// help recognize paste/cut edits in input.poll

// stores highlight worker timeout

// Unfinished key sequence

// Override magic textarea content restore that IE sometimes does

// on our hidden textarea on reload

// Attach the necessary event handlers when initializing the editor

// Older IE's will not fire a second mousedown for a double click

// Some browsers fire contextmenu *after* opening the menu, at

// which point we can't mess with it anymore. Context menu is

// handled in onMouseDown for these browsers.

// Used to suppress mouse event handling when a touch happens

// Sync scrolling between fake scrollbars and real scrollable

// area, ensure viewport is updated when scrolling.

// Listen to wheel events in order to try and update the viewport on time.

// Prevent wrapper from ever scrolling

// Force a relayout, or Opera won't use our image for some obscure reason

// Suppress optimizelegibility in Webkit, since it breaks text

// measuring on line wrapping boundaries.

// The default configuration options.

// Functions to run when options are changed.

// Indent the given line. The how parameter can be "smart",

// "add"/null, "subtract", or "prev". When aggressive is false

// (typically set to true for forced single-line indents), empty

// lines are not indented, and places where the mode returns Pass

// are left alone.

// Fall back to "prev" when the mode doesn't have an indentation

// method.

// Ensure that, if the cursor was in the whitespace at the start

// of the line, it is moved to the end of that space.

// This will be set to a {lineWise: bool, text: [string]} object, so

// that, when pasting, we know what kind of selections the copied

// text was made out of.

// When pasting N lines into N selections, insert one line per selection

// Normal behavior is to insert the new text into every selection

// When an 'electric' character is inserted, immediately trigger a reindent

// The textarea is kept positioned near the cursor to prevent the

// fact that it'll be scrolled into view on input from scrolling

// our fake cursor out of view. On webkit, when wrap=off, paste is

// very slow. So make the area wide instead.

// If border: 0; -- iOS fails to open keyboard (issue #1287)

// The publicly visible API. Note that methodOp(f) means

// 'wrap f in an operation, performed on its `this` parameter'.

// This is not the complete set of editor methods. Most of the

// methods defined on the Doc type are also injected into

// CodeMirror.prototype, for backwards compatibility and

// convenience.

// Used for horizontal relative motion. Dir is -1 or 1 (left or

// right), unit can be "char", "column" (like char, but doesn't

// cross line boundaries), "word" (across next word), or "group" (to

// the start of next group of word or non-word-non-whitespace

// chars). The visually param controls whether, in right-to-left

// text, direction 1 means to move towards the next index in the

// string, or towards the character to the right of the current

// position. The resulting position will have a hitSide=true

// property if it reached the end of the document.

// Case 1: We move within an ltr part in an ltr editor. Even with wrapped lines,

// nothing interesting happens.

// Case 2: We move within an rtl part or in an rtl editor on the same visual line

// Case 3: Could not move within this bidi part in this visual line, so leave

// the current bidi part

// Case 3a: Look for other bidi parts on the same visual line

// Case 3b: Look for other bidi parts on the next visual line

// Case 4: Nowhere to move

// For relative vertical movement. Dir may be -1 or 1. Unit can be

// "page" or "line". The resulting position will have a hitSide=true

// CONTENTEDITABLE INPUT STYLE

// FIXME this is all really shaky. might handle the few cases it needs to handle, but likely to cause problems

// TEXTAREA INPUT STYLE

// iOS exposes the clipboard API, but seems to discard content inserted into it

// Old-fashioned briefly-focus-a-textarea hack

// IE doesn't fire input events, so we schedule a read for the pasted content in this way

// Our model of the DOM might be outdated, in which case the range we try to set can be impossible

// On Android Chrome (version 56, at least), backspacing into an

// uneditable block element will put the cursor in that element,

// and then, because it's not editable, hide the virtual keyboard.

// Because Android doesn't allow us to actually detect backspace

// presses in a sane way, this code checks for when that happens

// and simulates a backspace press in this case.

// Try to move start of change to start of selection if ambiguous

// See input.poll and input.reset

// Flag that indicates whether we expect input to appear real soon

// now (after some event like 'keypress' or 'input') and are

// polling intensively.

// Self-resetting timeout for the poller

// Used to work around IE issue with selection being forgotten when focus moves away from textarea

// Needed to hide big blue blinking cursor on Mobile Safari (doesn't seem to work in iOS 8 anymore)

// Prevent normal selection in the editor (we handle our own)

// Wraps and hides input textarea

// The semihidden textarea that is focused when the editor is

// focused, and receives input.

// Redraw the selection and/or cursor

// Move the hidden textarea near the cursor to prevent scrolling artifacts

// Reset the input to correspond to the selection (or to be empty,

// when not typing and nothing is selected)

// IE8 will throw if the textarea is display: none or not in DOM

// Poll for input changes, using the normal rate of polling. This

// runs as long as the editor is focused.

// When an event has just come in that is likely to add or change

// something in the input textarea, we poll faster, to ensure that

// the change appears on the screen quickly.

// Read input from the textarea, and update the document to match.

// When something is selected, it is present in the textarea, and

// selected (unless it is huge, in which case a placeholder is

// used). When nothing is selected, the cursor sits after previously

// seen text (can be empty), which is stored in prevInput (we must

// not reset the textarea when typing, because that breaks IME).

// Since this is called a *lot*, try to bail out as cheaply as

// possible when it is clear that nothing happened. hasSelection

// will be the case when there is a lot of text in the textarea,

// in which case reading its value would be expensive.

// If nothing changed, bail.

// Work around nonsensical selection resetting in IE9/10, and

// inexplicable appearance of private area unicode characters on

// some key combos in Mac (#2689).

// Find the part of the input that is actually new

// Don't leave long text in the textarea, since it makes further polling slow

// Opera is difficult.

// Reset the current text selection only if the click is done outside of the selection

// and 'resetSelectionOnContextMenu' option is true.

// Work around Chrome issue (#2712)

// Adds "Select all" to context menu in FF

// Select-all will be greyed out if there's nothing to select, so

// this adds a zero-width space so that we can later check whether

// it got selected.

// Used to catch context-menu undo

// Re-set this, in case some other handler touched the

// selection in the meantime.

// EDITOR CONSTRUCTOR

// Passed to option handlers when there is no old value.

// These two are, on init, called from the constructor because they

// have to be initialized before the editor can start at all.

// FIXME

// Fetch the parser token for a given character. Useful for hacks

// that want to inspect the mode state (say, for completion).

// Default to positioning above (if specified and possible); otherwise default to positioning below

// Find the word at the given position (as returned by coordsChar).

// Set up methods on CodeMirror's prototype to redirect to the editor's document.

// Extra arguments are stored as the mode's dependencies, which is

// used by (legacy) mechanisms like loadmode.js to automatically

// load a mode. (Preferred mechanism is the require/define calls.)

/*, mode, …*/

// Minimal default mode.

// EXTENSIONS

// Set autofocus to true if this textarea is focused, or if it has

// autofocus and no other element is focused.

// Prevent this from being ran twice

/* 1 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 2 */

// CommonJS

// Return variables for tokenizers

// Indent multi-line strings (e.g. css).

// Indent the starts of attribute names.

// Closing tag spotted

// Opening tag spotted

/* 3 */

// LICENSE : MIT

/**
         * @return {boolean}
         */

/* 4 */

// Utility function that allows modes to be combined. The mode given

// as the base argument takes care of most of the normal mode

// functionality, but a second (typically simple) mode is used, which

// can override the style of text. Both modes get to parse all of the

// text, but when both assign a non-null style to a piece of code, the

// overlay wins, unless the combine argument was true and not overridden,

// or state.overlay.combineTokens was true, in which case the styles are

// combined.

// state.overlay.combineTokens always takes precedence over combine,

// unless set to null

/* 5 */

// Should characters that affect highlighting be highlighted separate?

// Does not include characters that will be output (such as `1.` and `-` for lists)

// Maximum number of nested blockquotes. Set to 0 for infinite nesting.

// Excess `>` will emit `error` token.

// Turn on task lists? ("- [ ] " and "- [x] ")

// Turn on strikethrough syntax

// Allow token types to be overridden by user-provided token types.

// CommonMark specifies tab as 4 spaces

// Blocks

// Reset linkTitle state

// Reset EM state

// Reset STRONG state

// Reset strikethrough state

// Reset state.quote

// Reset state.indentedCode

// Reset state.trailingSpace

// Mark this line as blank

// compute once per line (on first token)

// While this list item's marker's indentation is less than the deepest

//  list item's content's indentation,pop the deepest list item

//  indentation off the stack, and update block indentation state

// Reset inline styles which shouldn't propagate aross list items

// not comprehensive (currently only for setext detection purposes)

// Add this list item's content's indentation to the stack

// try switching mode

// if setext set, indicates line after ---/===

// line before ---/===

// has no effect on type so we can reset it now

// Inline

// Add `formatting-quote` and `formatting-quote-#` for blockquotes

// Add `error` instead if the maximum blockquote nesting depth is passed

// Only apply inline styles to non-url text

// Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth

// List marker (*, +, -, 1., etc)

// Matches link titles present on next line

// If this block is changed, it may need to be updated in GFM mode

// Must be exact

// See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis

// Em

// Strong

// Probably surrounded by spaces

// Surrounded by spaces, ignore

// Not surrounded by spaces, back up pointer

// Remove strikethrough

// Add strikethrough

// Probably surrounded by space

// Check if space, and return NULL if so (to avoid marking the space)

// Consume [

// Match URL

// Check for link title

// End of line, set flag to check next line

// More content on line, check if link title

// Reset state.formatting

// Reset state.taskList

/* 6 */

// Ensure all modes have a mime property for backwards compatibility

/* 7 */

// Used as scratch variables to communicate multiple values without

// consing up tons of objects.

// This is a crude lookahead trick to try and notice that we're

// parsing the argument patterns for a fat-arrow function before we

// actually hit the arrow token. It only works if the arrow is on

// the same line as the arguments and there's no strange noise

// (comments) in between. Fallback is to only notice when we hit the

// arrow, and not declare the arguments as locals for the arrow

// body.

// Try to skip TypeScript return type declarations after the arguments

// Parser

// Combinator utils

// FIXME function decls are also not block scoped

// Fall through means this is global

// Combinators

// Work around fat-arrow-detection complication for detecting typescript typed arrow params

// Class expressions may have an optional name.

// Interface

// Communicate our context to the combinators.

// (Less wasteful than consing up a hundred closures on every call.)

// Kludge to prevent 'maybelse' from blocking lexical scope pops

/* 8 */

// Tokenizers

// Must be '('

// Context management

// Dedent relative to current context.

// Resume indentation from parent context.

// SVG-specific

/* 9 */

/* 10 */

/* 11 */

// Module

/* 12 */

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

// when a module is imported multiple times with different media queries.

// I hope this will never occur (Hey this way we have smaller bundles)

/* 13 */

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// If passing function in options, then use it for resolve "head" element.

// Useful for Shadow Root style i.e

// {

//   insertInto: function () { return document.querySelector("#foo").shadowRoot }

// }

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// If a transform function was defined, run it on the css

// If the transform function returns a falsy value, don't add this css.

// This allows conditional loading of css

// noop

// If transform returns a value, use that instead of the original css.

// This allows running runtime transformations on the css.

// http://stackoverflow.com/a/26603875

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

// By default, add <style> tags to the <head> element

// By default, add <style> tags to the bottom of the target

/* 14 */

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

// get current location

// blank or null?

// send back the fixed css

// strip quotes (if they exist)

// already a full url? no change

//TODO: should we add protocol?

// convert the url to a full url

/* 15 */

/* 16 */

/* WEBPACK VAR INJECTION */

/* 17 */

/* 18 */

// Reverse add and remove so removes are output first to match common convention

// The diffing algorithm is tied to add then remove output and this is the simplest

// route to get the desired output with minimal overhead.

// Common case

// Special case handle for when one terminal is ignored. For this case we merge the

// terminal into the prior string and drop the change.

/*istanbul ignore end*/

/*istanbul ignore start*/

// Allow subclasses to massage the input prior to running

// Identity per the equality and tokenizer

// Main worker method. checks all permutations of a given edit length for acceptance.

// No one else is going to attempt to use this value, clear it

// If we have hit the end of both strings, then we are done

// Select the diagonal that we want to branch from. We select the prior

// path whose position in the new string is the farthest from the origin

// and does not pass the bounds of the diff graph

// No need to clone, we've pulled it from the list

// Otherwise track this path as a potential candidate and continue.

// If this path is a terminal then prune

// Performs the length of edit iteration. Is a bit fugly as this has to support the

// sync and async mode which is never fun. Loops over execEditLength until a value

// is produced.

// This should not happen, but we want to be safe.

/* istanbul ignore next */

// We need to clone here as the component clone operation is just

// as shallow array clone

/* istanbul ignore else */

// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode

// Ranges and exceptions:

// Latin-1 Supplement, 0080–00FF

//  - U+00D7  × Multiplication sign

//  - U+00F7  ÷ Division sign

// Latin Extended-A, 0100–017F

// Latin Extended-B, 0180–024F

// IPA Extensions, 0250–02AF

// Spacing Modifier Letters, 02B0–02FF

//  - U+02C7  ˇ &#711;  Caron

//  - U+02D8  ˘ &#728;  Breve

//  - U+02D9  ˙ &#729;  Dot Above

//  - U+02DA  ˚ &#730;  Ring Above

//  - U+02DB  ˛ &#731;  Ogonek

//  - U+02DC  ˜ &#732;  Small Tilde

//  - U+02DD  ˝ &#733;  Double Acute Accent

// Latin Extended Additional, 1E00–1EFF

// Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.

// If we have an empty string in the next field and we have only word chars before and after, merge

// Ignore the final empty token that occurs if the string ends with a new line

// Merge the content and line separators into single tokens

// This function handles the presence of circular references by bailing out when encountering an

// object that is already on the "stack" of items being processed.

// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a

// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:

// Parse diff metadata

// File header found, end parsing diff metadata

// Diff index

// Parse file headers if they are defined. Unified diff requires them, but

// there's no technical issues to have an isolated hunk without file header

// Parse hunks

// Ignore unexpected content unless in strict mode

// Parses the --- and +++ headers, if none are found, no lines

// are consumed.

// Parses a hunk

// This assumes that we are at the start of a hunk.

// Handle the empty block count case

// Perform optional sanity checking

// Check if trying to fit beyond text length, and if not, check it fits

// after offset location (or desired location on first iteration)

// Check if trying to fit before text beginning, and if not, check it fits

// before offset location

// We tried to fit hunk before text beginning and beyond text lenght, then

// hunk can't fit on the text. Return undefined

// Wrapper that supports multiple file patches via callbacks.

// Apply the diff to the input

/**
     * Checks if the hunk exactly fits on the provided location
     */

// Context sanity check

// Search best fit offsets for each hunk based on the previous ones

// Set lower text limit to end of the current hunk, so next ones don't try

// to fit over already patched text

// Apply patch hunks

// Handle EOFNL insertion/removal

// Append an empty value to make cleanup easier

// If we have previous context, start with that

// Output our changes

// Track the updated file position

// Identical context lines. Track line changes

// Close out any changes that have been output (or join overlapping)

// Overlapping

// end the range and output

// EOF is inside this hunk

// special case: old has no eol and no trailing context; no-nl can end up before adds

// See: http://code.google.com/p/google-diff-match-patch/wiki/API

// ensure that win32 namespaces has two leading slashes, so that the path is

// handled properly by the win32 version of path.parse() after being normalized

// https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces

// must be multiple of 3

// go through the array every three bytes, we'll deal with trailing stuff later

// pad the end with zeros, but make sure to not forget the extra bytes

// Return an augmented `Uint8Array` instance, for best performance

// Fallback: Return an object instance of the Buffer class

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

// Common case.

// this throws if `array` is not a valid ArrayBuffer

// Writing a hex string, for example, that contains invalid characters will

// cause everything after the first invalid character to be ignored. (e.g.

// 'abxxcd' will be treated as 'ab')

// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence

// The _isBuffer check is for Safari 5-7 support, because it's missing

// Object.prototype.constructor. Remove this eventually

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

// Note: cannot use `length < kMaxLength()` here because that fails when

// length is NaN (which is otherwise coerced to zero.)

// Use a for loop to avoid recursion

// assume utf8

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

// Arguments:

// - buffer - a Buffer to search

// - val - a string, Buffer, or number

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - encoding - an optional encoding, relevant is val is a string

// - dir - true for indexOf, false for lastIndexOf

// Empty buffer means no match

// Normalize byteOffset

// Coerce to Number.

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize val

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Special case: looking for empty string/buffer always fails

// Search for a byte value [0-255]

// must be an even number of digits

// Node's code seems to be doing this and not & 0x7F..

// we did not generate a valid codePoint so insert a

// replacement char (U+FFFD) and advance only 1 byte

// encode to utf16 (surrogate pair dance)

// avoid extra slice()

// Decode in chunks to avoid "call stack size exceeded".

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// the lowest limit is Chrome, with 0x10000 args.

// We go 1 magnitude less, for safety

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

// not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

// For Node v0.10 support. Remove this eventually.

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect

// Buffer instances.

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// property of a typed array.

// This behaves neither like String nor Uint8Array in that we set start/end

// to their upper/lower bounds if the value passed is out of range.

// undefined is handled specially as per ECMA-262 6th Edition,

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// Return early if start > this.length. Done here to prevent potential uint32

// coercion fail below.

// Force coersion to uint32. This will also coerce falsey/NaN values to 0.

// Buffer#write(string)

// Warning: maxLength not taken into account in base64Write

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// Copy 0 bytes; we're done

// Fatal error conditions

// Are we oob?

// descending copy from end

// ascending copy from start

// Usage:

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

// Handle string cases:

// Invalid ranges are not set to a default, so can range check early.

// HELPER FUNCTIONS

// ================

// is surrogate component

// last char was a lead

// no lead yet

// unexpected trail

// valid lead

// unpaired lead

// 2 leads in a row

// valid surrogate pair

// encode utf8

// the number of equal signs (place holders)

// if there are two placeholders, than the two characters before it

// represent one byte

// if there is only one, then the three characters before it represent 2 bytes

// this is just a cheap hack to not do indexOf twice

// base64 is 4/3 + up to two characters of the original data

// if there are placeholders, only get up to the last complete 4 chars

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

/*#__PURE__*/

/**
 * @class
 */

// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

// generate timestamp or delta

// see http://nodejs.org/api/process.html#process_process_hrtime

// The debug function is excluded entirely from the minified version.

/* nomin */

// Note: this is the semver.org version of the spec that it implements

// Not necessarily the package version of this code.

// ## Non-numeric Identifier

// Zero or more digits, followed by a letter or hyphen, and then zero or

// more letters, digits, or hyphens.

// ## Main Version

// Three dot-separated numeric identifiers.

// ## Pre-release Version Identifier

// A numeric identifier, or a non-numeric identifier.

// ## Pre-release Version

// Hyphen, followed by one or more dot-separated pre-release version

// identifiers.

// ## Build Metadata Identifier

// Any combination of digits, letters, or hyphens.

// ## Build Metadata

// Plus sign, followed by one or more period-separated build metadata

// ## Full Version String

// A main version, followed optionally by a pre-release version and

// build metadata.

// Note that the only major, minor, patch, and pre-release sections of

// the version string are capturing groups.  The build metadata is not a

// capturing group, because it should not ever be used in version

// comparison.

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.

// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty

// common in the npm registry.

// Something like "2.*" or "1.2.x".

// Note that "x.x" is a valid xRange identifer, meaning "any version"

// Only the first item is strictly required.

// Tilde ranges.

// Meaning is "reasonably at or greater than"

// Caret ranges.

// Meaning is "at least and backwards compatible with"

// A simple gt/lt/eq thing, or just "" to indicate "any version"

// An expression to strip any whitespace between the gtlt and the thing

// it modifies, so that `> 1.2.3` ==> `>1.2.3`

// this one has to use the /g flag

// Something like `1.2.3 - 1.2.4`

// Note that these all use the loose form, because they'll be

// checked against either the strict or loose comparator form

// later.

// Star ranges basically just allow anything at all.

// Compile to actual regexp objects.

// All are flag-free, unless they were created above with a flag.

// these are actually numbers

// numberify any prerelease numeric ids

// NOT having a prerelease is > having one

// preminor will bump the version up to the next minor release, and immediately

// down to pre-release. premajor and prepatch work the same way.

// If this is already a prerelease, it will bump to the next version

// drop any prereleases that might already exist, since they are not

// relevant at this point.

// If the input is a non-prerelease version, this acts the same as

// prepatch.

// If this is a pre-major version, bump up to the same major version.

// Otherwise increment major.

// 1.0.0-5 bumps to 1.0.0

// 1.1.0 bumps to 2.0.0

// If this is a pre-minor version, bump up to the same minor version.

// Otherwise increment minor.

// 1.2.0-5 bumps to 1.2.0

// 1.2.1 bumps to 1.3.0

// If this is not a pre-release version, it will increment the patch.

// If it is a pre-release it will bump up to the same patch version.

// 1.2.0-5 patches to 1.2.0

// 1.2.0 patches to 1.2.1

// This probably shouldn't be used publicly.

// 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.

// didn't increment anything

// 1.2.0-beta.1 bumps to 1.2.0-beta.2,

// 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0

// First, split based on boolean or ||

// throw out any that are not relevant for whatever reason

// ~, ~> --> * (any, kinda silly)

// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0

// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0

// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0

// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0

// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0

// This function is passed to string.replace(re[HYPHENRANGE])

// M, m, patch, prerelease, build

// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5

// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do

// 1.2 - 3.4 => >=1.2.0 <3.5.0

// if ANY of the sets match ALL of its comparators, then pass

// Find the set of versions that are allowed to have prereleases

// For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0

// That should allow `1.2.3-pr.2` to pass.

// However, `1.2.4-alpha.notready` should NOT be allowed,

// even though it's within the range set by the comparators.

// Version has a -pre, but it's not one of the ones we like.

// If it satisifes the range it is not outside

// From now on, variable terms are as if we're in "gtr" mode.

// but note that everything is flipped for the "ltr" function.

// If the edge version comparator has a operator then our version

// isn't outside it

// If the lowest version comparator has an operator and our version

// is less than it then it isn't higher than the range

// if it literally is just '>' or '' then allow anything.

// `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

// `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

// normalize spaces

// `^ 1.2.3` => `^1.2.3`

// `~ 1.2.3` => `~1.2.3`

// At this point, the range is completely trimmed and

// ready to be split into comparators.

// comprised of xranges, tildes, stars, and gtlt's at this point.

// already replaced the hyphen ranges

// turn into a set of JUST comparators.

// ^ --> * (any, kinda silly)

// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0

// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0

// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0

// ^1.2.3 --> >=1.2.3 <2.0.0

// ^1.2.0 --> >=1.2.0 <2.0.0

// ~1.2 == >=1.2.0 <1.3.0

// ~1.2.3 == >=1.2.3 <1.3.0

// nothing is allowed

// replace X with 0

// >1 => >=2.0.0

// >1.2 => >=1.3.0

// >1.2.3 => >= 1.2.4

// <=0.7.x is actually <0.8.0, since any 0.7.x should

// pass.  Similarly, <=7.x is actually <8.0.0, etc.

// Because * is AND-ed with everything else in the comparator,

// and '' means "any version", just remove the *s entirely.

// Looseness is ignored here.  star is always as loose as it gets!

// in loose mode, throw out any that are not valid comparators

// Mostly just for testing and legacy API reasons

// satisfies(v, range, loose)

// compare(max, v, true)

// compare(min, v, true)

// Return '*' instead of '' so that truthiness works.

// This will throw if it's invalid anyway

// Determine if version is less than all the versions possible in the range

// Determine if version is greater than all the versions possible in the range.

// dedent can be used as a plain function

// first, perform interpolation

// now strip indentation

// handle escaped newlines at the end to ensure they don't get stripped too

// dedent eats leading and trailing whitespace too

// pre-release version is smaller than the normal version in semver,

// we need to treat it as the normal one so as to test new features.

// Prevent breaking changes

/* MIT license */

// NOTE: conversions should only return primitive values (i.e. arrays, or

//       values that give correct `typeof` results).

//       do not use box values types (i.e. Number(), String(), etc.)

// hide .channels and .labels properties

// Compute comparative distance

// Check if its less, if so set as closest

// assume sRGB

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb

// wh + bl cant be > 1

// hsv -> ansi16 optimization

// optimization here; we already know the value and don't need to get

// it converted for us.

// we use the extended greyscale palette here, with the exception of

// black and white. normal palette only has 4 greyscale shades.

// handle greyscale

// https://en.wikipedia.org/wiki/Breadth-first_search

// http://jsperf.com/1-vs-infinity

// micro-opt, but this is simple.

// unshift -> queue -> pop

// we're assuming the result is an array here.

// see notice in conversions.js; don't use box types

// in conversion functions.

// preserve .conversion property if there is one

// Make the export immutable

// 21 isn't widely supported and 22 does the same thing

// Bright color

// Fix humans

// Node.js 7.5.0 is the first version of Node.js to include a patch to

// libuv that enables 256 color output on Windows. Anything earlier and it

// won't work. However, here we target Node.js 8 at minimum as it is an LTS

// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows

// release that supports 256 colors. Windows 10 build 14931 is the first release

// that supports 16m/TrueColor.

// No default

// eslint-disable-next-line max-params

// Detect level if not set manually

// We check for this.template here since calling `chalk.constructor()`

// by itself will have a `this` of a previously constructed chalk object

// If chalk() was called by itself or with a string,

// return the string itself as a string.

// Use bright blue on Windows as the normal blue color is illegible

// Support varags, but simply cast to string in case there's only one arg

// Don't slice `arguments`, it prevents V8 optimizations

// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,

// see https://github.com/chalk/chalk/issues/58

// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.

// Replace any instances already present with a re-opening code

// otherwise only the part of the string until said closing code

// will be colored, and the rest will simply be 'plain'.

// Close the styling before a linebreak and reopen

// after next line to fix a bleed issue on macOS

// https://github.com/chalk/chalk/pull/92

// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue

// eslint-disable-line no-proto

// See below for fix regarding invisible grey/dim combination on Windows

// `__proto__` is used because we must return a function, but there is

// no way to create a function with a different prototype

// eslint-disable-line new-cap

/* eslint-disable no-nested-ternary */

// Swapping the strings if `a` is longer than `b` so we know which one is the

// shortest & which one is the longest

// Performing suffix trimming:

// We can linearly drop suffix common to both strings since they

// don't increase distance at all

// Note: `~-` is the bitwise way to perform a `- 1` operation

// Performing prefix trimming

// We can linearly drop prefix common to both strings since they

// istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`

// @ts-ignore: https://github.com/Microsoft/TypeScript/issues/5863

// istanbul ignore next

// @ts-ignore

/* istanbul ignore next*/

/* doNotNormalizeTrue */

// release that supports 256 colors.

// allow CLI overriding, e.g., prettier package.json --tab-width 1 --tab-width 2

// Handle nodes with decorators. They should start at the first decorator

// Copyright 2014, 2015, 2016, 2017 Simon Lydell

// License: MIT. (See LICENSE.)

// This regex comes from regex.coffee, and is inserted here by generate-index.js

// (run `npm run build`).

/*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
  
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

/* vim: set sw=4 ts=4 et tw=80 : */

/*
    Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
    Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
  
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

// See `tools/generate-identifier-regex.js`.

// 7.6 Identifier Names and Identifiers

// ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:

// ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:

// ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:

// ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:

// 7.2 White Space

// a..z

// A..Z

// $ (dollar) and _ (underscore)

// 0..9

// a..f

// A..F

// 0..7

// 7.3 Line Terminators

/*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
  
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

// yield should not be treated as keyword under non-strict mode.

// Custom parser API always works with JavaScript.

// Create a new object {parserName: parseFn}. Uses defineProperty() to only call

// the parsers getters when actually calling the parser `parse` function.

// #!/bin/node, #!/usr/bin/node, #!/usr/local/bin/node

// There are some weird cases where paths are missing, causing Jest

// failures. It's unclear what these correspond to in the real world.

// nop

// Copy options and fill in default values.

// Use indent to add tabs for all the levels of tabs we need

// Use align for all the spaces that are needed

// size is absolute from 0 and not relative to the current

// indentation, so we use -Infinity to reset the indentation to 0

/* eslint-disable yoda */

// Hangul Jamo

// LEFT-POINTING ANGLE BRACKET

// RIGHT-POINTING ANGLE BRACKET

// CJK Radicals Supplement .. Enclosed CJK Letters and Months

// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A

// CJK Unified Ideographs .. Yi Radicals

// Hangul Jamo Extended-A

// Hangul Syllables

// CJK Compatibility Ideographs

// Vertical Forms

// CJK Compatibility Forms .. Small Form Variants

// Halfwidth and Fullwidth Forms

// Kana Supplement

// Enclosed Ideographic Supplement

// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane

// code points are derived from:

// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt

// Ignore control characters

// Ignore combining characters

// Surrogates

// Allow `skip` functions to be threaded together without having

// to check for failures (did someone say monads?).

// This one doesn't use the above helper function because it wants to

// test \r\n in order and `skip` doesn't support ordering and we only

// want to skip one newline. It's simple to implement.

// We need to skip all the potential trailing inline comments

// Tabs behave in a way that they are aligned to the nearest

// multiple of tabWidth:

// 0 -> 4, 1 -> 4, 2 -> 4, 3 -> 4

// 4 -> 8, 5 -> 8, 6 -> 8, 7 -> 8 ...

// `rawContent` is the string exactly like it appeared in the input source

// code, without its enclosing quotes.

// If `rawContent` contains at least one of the quote preferred for enclosing

// the string, we might want to enclose with the alternate quote instead, to

// minimize the number of escaped quotes.

// If we matched an escape, and the escaped character is a quote of the

// other type than we intend to enclose the string with, there's no need for

// it to be escaped, so return it _without_ the backslash.

// If we matched an unescaped quote and it is of the _same_ type as we

// intend to enclose the string with, it must be escaped, so return it with

// a backslash.

// Matches _any_ escape and unescaped quotes (both single and double).

// For some reason, TypeScript parses `// x` inside of JSXText as a comment

// We already "print" it via the raw text, we don't need to re-print it as a

// comment

// shortcut to avoid needless string `RegExp`s, replacements, and allocations within `string-width`

// ** is right-associative

// x ** y ** z --> x ** (y ** z)

// Tests if an expression starts with `{`, or (if forbidFunctionClassAndDoExpr

// holds) `function`, `class`, or `do {}`. Will be overzealous if there's

// already necessary grouping parentheses.

// Note: this function doesn't ignore leading comments unlike isNextLineEmpty

// All the leading whitespaces

// Check for the alternate quote, to determine if we're allowed to swap

// the quotes on a DirectiveLiteral.

// Directives are exact code unit sequences, which means that you can't

// change the escape sequences they use.

// See https://github.com/prettier/prettier/issues/1555

// and https://tc39.github.io/ecma262/#directive-prologue

// It might sound unnecessary to use `makeString` even if the string already

// is enclosed with `enclosingQuote`, but it isn't. The string could contain

// unnecessary escapes (such as in `"\'"`). Always using `makeString` makes

// sure that we consistently output the minimum amount of escaped quotes.

// Trim whitespace at the end of line

// fallthrough

// When there are multiple parts to process,

// the parts need to be pushed onto the stack in reverse order,

// so that they are processed in the original order

// when the stack is popped.

// Breaks are not propagated through conditional groups because

// the user is expected to manually handle what breaks.

// Force this doc into flat mode by statically converting all

// lines into spaces (or soft lines into nothing). Hard lines

// should still output because there's too great of a chance

// of breaking existing assumptions otherwise.

// Expanded states are a rare case where a document

// can manually provide multiple representations of

// itself. It provides an array of documents

// going from the least expanded (most flattened)

// representation first to the most expanded. If a

// group has these, we need to manually go through

// these states and find the first one that fits.

// Fills each line with as much code as possible before moving to a new

// line with the same indentation.

// Expects doc.parts to be an array of alternating content and

// whitespace. The whitespace contains the linebreaks.

// For example:

//   ["I", line, "love", line, "monkeys"]

// or

//   [{ type: group, ... }, softline, { type: group, ... }]

// It uses this parts structure to handle three main layout cases:

// * The first two content items fit on the same line without

//   breaking

//   -> output the first content item and the whitespace "flat".

// * Only the first content item fits on the line without breaking

//   -> output the first content item "flat" and the whitespace with

//   "break".

// * Neither content item fits on the line without breaking

//   -> output the first content item and the whitespace with "break".

// At this point we've handled the first pair (context, separator)

// and will create a new fill doc for the rest of the content.

// Ideally we wouldn't mutate the array here but coping all the

// elements to a new array would make this algorithm quadratic,

// which is unusable for large arrays (e.g. large texts in JSX).

// This line was forced into the output even if we

// were in flattened mode, so we need to tell the next

// group that no matter what, it needs to remeasure

// because the previous measurement didn't accurately

// capture the entire expression (this is necessary

// for nested groups)

/* shouldTraverseConditionalGroups */

// HACK remove ending hardline, original PR: #1984

// TODO: remove in 2.0, we already exposed it in docUtils

// This reverse insertion sort almost always takes constant

// time because we almost always (maybe always?) append the

// nodes in order anyway.

// As efficiently as possible, decorate the comment object with

// .precedingNode, .enclosingNode, and/or .followingNode properties, at

// least one of which is guaranteed to be defined.

// The gap string contained something other than whitespace or open

// parentheses.

// We haven't found it, it probably means that some of the locations are off.

// Let's just return the first one.

// Flow

// The comment is completely contained by this child node.

// Abandon the binary search at this level.

// This child node falls completely before the comment.

// Because we will never consider this node or any nodes

// before it again, this node must be the closest preceding

// node we have encountered so far.

// This child node falls completely after the comment.

// Because we will never consider this node or any nodes after

// it again, this node must be the closest following node we

// have encountered so far.

// We don't want comments inside of different expressions inside of the same

// template literal to move to another expression.

// If a comment exists on its own line, prefer a leading comment.

// We also need to check if it's the first line of the file.

// Always a leading comment.

// There is content before this comment on the same line, but

// none after it, so prefer a trailing comment of the previous node.

// Otherwise, text exists both before and after the comment on

// the same line. If there is both a preceding and following

// node, use a tie-breaking algorithm to determine if it should

// be attached to the next or previous node. In the last case,

// simply attach the right node;

// These node references were useful for breaking ties, but we

// don't need them anymore, and they create cycles in the AST that

// may lead to infinite recursion if we don't delete them here.

// Leading block comments should see if they need to stay on the

// same line or not.

// We don't want the line to break

// when the parentParentNode is a ClassDeclaration/-Expression

// And the parentNode is in the superClass property

// This allows comments at the end of nested structures:

//   x: 1,

//   y: 2

//   // A comment

// Those kinds of comments are almost always leading comments, but

// here it doesn't go "outside" the block and turns it into a

// trailing comment for `2`. We can simulate the above by checking

// if this a comment on its own line; normal trailing comments are

// always at the end of another expression.

// The name of the current property is always the penultimate element of

// this.stack, and always a String.

// Since the name is always a string, null is a safe sentinel value to

// return if we do not know the name of the (root) value.

// The value of the current property is always the final element of

// this.stack.

// Temporarily push properties named by string arguments given after the

// callback function onto this.stack, then call the callback with a

// reference to this (modified) FastPath object. Note that the stack will

// be restored to its original state after the callback is finished, so it

// is probably a mistake to retain a reference to the path.

/*, name1, name2, ... */

// Similar to FastPath.prototype.call, except that the value obtained by

// accessing this.getValue()[name1][name2]... should be array-like. The

// callback will be called with a reference to this path object for each

// element of the array.

// If the callback needs to know the value of i, call

// path.getName(), assuming path is the parameter name.

// Similar to FastPath.prototype.each, except that the results of the

// callback function invocations are stored in an array and returned at

// the end of the iteration.

/**
 * Takes an abstract syntax tree (AST) and recursively converts it to a
 * document (series of printing primitives).
 *
 * This is done by descending down the AST recursively. The recursion
 * involves two functions that call each other:
 *
 * 1. printGenerically(), which is defined as an inner function here.
 *    It basically takes care of node caching.
 * 2. callPluginPrintFunction(), which checks for some options, and
 *    ultimately calls the print() function provided by the plugin.
 *
 * The plugin function will call printGenerically() again for child nodes
 * of the current node, which will do its housekeeping, then call the
 * plugin function again, and so on.
 *
 * All the while, these functions pass a "path" variable around, which
 * is a stack-like data structure (FastPath) that maintains the current
 * state of the recursion. It is called "path", because it represents
 * the path to the current node through the Abstract Syntax Tree.
 */

// We let JSXElement print its comments itself because it adds () around

// UnionTypeAnnotation has to align the child without the comments

// Add a hardline to make the indents take effect

// It should be removed in index.js format()

// Escape hatch

// Potentially switch to a different parser

/* istanbul ignore if */

// Continue with current parser

// See https://www.ecma-international.org/ecma-262/5.1/#sec-A.5

// JS and JS like to avoid repetitions

// ES 2015

// Flow, TypeScript

// TypeScript

// Contract the range so that it has non-whitespace characters at its endpoints.

// This ensures we can format a range that doesn't end on a node.

// Remove extra leading indentation as well as the added indentation after last newline

// If there's a prettier-ignore, we're not printing that sub-tree so we

// don't know if the comments was printed or not.

// diff old and new cursor node texts, with a special cursor

// symbol inserted to find out where it moves to

// track the cursor offset only if it's within our range

// keep the cursor as it was if it was before the start of the range

// handle the case where the cursor was past the end of the range

// handle the case where the cursor was in the range

// --insert-pragma

// front-matter

// first non-front-matter comment

/**
     * something
     *
     * @format
     */

// Workaround when `postcss-values-parser` parse `not`, `and` or `or` keywords as `value-func`

// Workaround for SCSS nested properties

/*, options */

/**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *
   */

// Normalize multi-line directives

// strip linecomments from pragmas

// trailing spaces after delimiters are allowed

// If a Less file ends up being parsed with the SCSS parser, Less

// variable declarations will be parsed as atrules with names ending

// with a colon, so keep the original case then.

// Ignore empty item (i.e. `$key: ()`)

// Check open parens contain key/value pair (i.e. `(key: value)` and `(key: (value, other-value)`)

// SCSS map declaration (i.e. `$map: (key: value, other-key: other-value)`)

// List as value of key inside SCSS map (i.e. `$map: (key: (value other-value other-other-value))`)

// Workaround a bug where the location is off.

// https://github.com/postcss/postcss-scss/issues/63

// variable declarations will be parsed as at-rules with names ending

// postcss-media-query-parser

// postcss-selector-parser

// Nested SCSS property

// postcss-values-parser

// Ignore value inside `url()`

// Ignore after latest node (i.e. before semicolon)

// Ignore spaces before/after string interpolation (i.e. `"#{my-fn("_")}"`)

// Ignore css variables and interpolation in SCSS (i.e. `--#{$var}`)

// Formatting math operations

// Print spaces before and after math operators beside SCSS interpolation as is

// (i.e. `#{$var}+5`, `#{$var} +5`, `#{$var}+ 5`, `#{$var} + 5`)

// (i.e. `5+#{$var}`, `5 +#{$var}`, `5+ #{$var}`, `5 + #{$var}`)

// Print spaces before and after addition and subtraction math operators as is in `calc` function

// due to the fact that it is not valid syntax

// (i.e. `calc(1px+1px)`, `calc(1px+ 1px)`, `calc(1px +1px)`, `calc(1px + 1px)`)

// Print spaces after `+` and `-` in color adjuster functions as is (e.g. `color(red l(+ 20%))`)

// Adjusters with signed numbers (e.g. `color(red l(+20%))`) output as-is.

// Formatting `/`, `+`, `-` sign

// Ignore inline comment, they already contain newline at end (i.e. `// Comment`)

// Add `hardline` after inline comment (i.e. `// comment\n foo: bar;`)

// Handle keywords in SCSS control directive

// At-rule `namespace` should be in one line

// Formatting `grid` property

// Add `space` before next math operation

// Note: `grip` property have `/` delimiter and it is not math operation, so

// `grid` property handles above

// Be default all values go through `line`

// Ignore colon (i.e. `:`)

// Indent is not needed for import url when url is very long

// and node has two groups

// when type is value-comma_group

// example @import url("verylongurl") projection,tv

// Key/Value pair in open paren already indented

// Don't add spaces on `:` in `url` function (i.e. `url(fbglyph: cross-outline, fig-white)`)

/*, parent*/

// Formatter based on @glimmerjs/syntax's built-in test formatter:

// https://github.com/glimmerjs/glimmer-vm/blob/master/packages/%40glimmer/syntax/lib/generation/print.ts

/* istanbul ignore if*/

// The problem here is that I want to not break at all if the children

// would not break but I need to force an indent, so I use a hardline.

/**
         * What happens now:
         * <div>
         *   Hello
         * </div>
         * ==>
         * <div>Hello</div>
         * This is due to me using hasChildren to decide to put the hardline in.
         * I would rather use a {DOES THE WHOLE THING NEED TO BREAK}
         */

/**
         * I want this boolean to be: if params are going to cause a break,
         * not that it has params.
         */

/**
 * Prints a string literal with the correct surrounding quotes based on
 * `options.singleQuote` and the number of escaped quotes contained in
 * the string literal. This function is the glimmer equivalent of `printString`
 * in `common/util`, but has differences because of the way escaped characters
 * are treated in hbs string literals.
 * @param {string} stringLiteral - the string literal value
 * @param {object} options - the prettier options object
 */

// If `stringLiteral` contains at least one of the quote preferred for

// enclosing the string, we might want to enclose with the alternate quote

// instead, to minimize the number of escaped quotes.

// (Glimmer/HTML) ignore TextNode whitespace

// unreleased

// unterminated node in ie conditional comment

// e.g. <!--[if lt IE 9]><html><![endif]-->

// incomplete html in ie conditional comment

// e.g. <!--[if lt IE 9]></div><![endif]-->

// top-level elements (excluding <template>, <style> and <script>) in Vue SFC are considered custom block

// custom blocks can be written in other languages so we should preserve them to not break the code

// vue parser can be used for vue dom template as well, so we should still format top-level <html>

/** there's no opening/closing tag or it's considered not breakable */

/** spaces between children */

/** firstChild leadingSpaces and lastChild trailingSpaces */

// <!-- display: block -->

/**
   *     <!--[if ...]><!--><target><!--<![endif]-->
   */

// `{{` + `}}`

/**
 * - add `hasLeadingSpaces` field
 * - add `hasTrailingSpaces` field
 * - add `hasDanglingSpaces` field for parent nodes
 * - add `isWhitespaceSensitive`, `isIndentationSensitive` field for text nodes
 * - remove insensitive whitespaces
 */

/*, options*/

/**
 * - add `isLeadingSpaceSensitive` field
 * - add `isTrailingSpaceSensitive` field
 * - add `isDanglingSpaceSensitive` field for parent nodes
 */

// self-closing

// \xA0: non-breaking whitespace

// https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/codegen/events.js#L3-L4

// arrow function or anonymous function

// simple member expression chain (a, a.b, a['b'], a["b"], a[0], a[b])

/**
 *     v-for="... in ..."
 *     v-for="... of ..."
 *     v-for="(..., ...) in ..."
 *     v-for="(..., ...) of ..."
 */

// modified from https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/parser/index.js#L370-L387

/**
   * Srcset Parser
   *
   * By Alex Bell |  MIT License
   *
   * JS Parser for the string value that appears in markup <img srcset="here">
   *
   * @returns Array [{url: _, d: _, w: _, h:_}, ...]
   *
   * Based super duper closely on the reference algorithm at:
   * https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-srcset-attribute
   *
   * Most comments are copied in directly from the spec
   * (except for comments in parens).
   */

// 1. Let input be the value passed to this algorithm.

// UTILITY FUNCTIONS

// Manual is faster than RegEx

// http://bjorn.tipling.com/state-and-regular-expressions-in-javascript

// http://jsperf.com/whitespace-character/5

// space

// horizontal tab

// new line

// form feed

// carriage return

// 4. Splitting loop: Collect a sequence of characters that are space

//    characters or U+002C COMMA characters. If any U+002C COMMA characters

//    were collected, that is a parse error.

// (Don't use \s, to avoid matching non-breaking space)

// ( Positive or negative or unsigned integers or decimals, without or without exponents.

// Must include at least one digit.

// According to spec tests any decimal point must be followed by a digit.

// No leading plus sign is allowed.)

// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-floating-point-number

// 2. Let position be a pointer into input, initially pointing at the start

//    of the string.

// 3. Let candidates be an initially empty source set.

// 5. If position is past the end of input, return candidates and abort these steps.

// (we're done, this is the sole return path)

// 6. Collect a sequence of characters that are not space characters,

//    and let that be url.

// 7. Let descriptors be a new empty list.

// 8. If url ends with a U+002C COMMA character (,), follow these substeps:

//		(1). Remove all trailing U+002C COMMA characters from url. If this removed

//         more than one character, that is a parse error.

// (Jump ahead to step 9 to skip tokenization and just push the candidate).

// (Close of big while loop.)

/**
       * Tokenizes descriptor properties prior to parsing
       * Returns undefined.
       */

// 8.1. Descriptor tokeniser: Skip whitespace

// 8.2. Let current descriptor be the empty string.

// 8.3. Let state be in descriptor.

//  Do the following depending on the value of state.

//  For the purpose of this step, "EOF" is a special character representing

//  that position is past the end of input.

// In descriptor

// 8.4. Let c be the character at position.

// Do the following, depending on the value of c:

// Space character

// If current descriptor is not empty, append current descriptor to

// descriptors and let current descriptor be the empty string.

// Set state to after descriptor.

// U+002C COMMA (,)

// Advance position to the next character in input. If current descriptor

// is not empty, append current descriptor to descriptors. Jump to the step

// labeled descriptor parser.

// U+0028 LEFT PARENTHESIS (()

// Append c to current descriptor. Set state to in parens.

// (end "in descriptor"

// In parens

// Anything else

// Append c to current descriptor.

// U+0029 RIGHT PARENTHESIS ())

// Append c to current descriptor. Set state to in descriptor.

// After descriptor

// Space character: Stay in this state.

// Set state to in descriptor. Set position to the previous character in input.

// Advance position to the next character in input.

// (close while true loop)

/**
       * Adds descriptor properties to a candidate, pushes to the candidates array
       * @return undefined
       */

// Declared outside of the while loop so that it's only created once.

// 9. Descriptor parser: Let error be no.

// 10. Let width be absent.

// 11. Let density be absent.

// 12. Let future-compat-h be absent. (We're implementing it now as h)

// 13. For each descriptor in descriptors, run the appropriate set of steps

// from the following list:

// If the descriptor consists of a valid non-negative integer followed by

// a U+0077 LATIN SMALL LETTER W character

// If width and density are not both absent, then let error be yes.

// Apply the rules for parsing non-negative integers to the descriptor.

// If the result is zero, let error be yes.

// Otherwise, let width be the result.

// If width, density and future-compat-h are not all absent, then let error

// be yes.

// Apply the rules for parsing floating-point number values to the descriptor.

// If the result is less than zero, let error be yes. Otherwise, let density

// be the result.

// If height and density are not both absent, then let error be yes.

// If the result is zero, let error be yes. Otherwise, let future-compat-h

// (close step 13 for loop)

// 15. If error is still no, then append a new image source to candidates whose

// URL is url, associated with a width width if not absent and a pixel

// density density if not absent. Otherwise, there is a parse error.

// (close parseDescriptors fn)

// Node. Does not work with strict CommonJS, but

// only CommonJS-like environments that support module.exports,

// like Node.

// Browser globals (root is window)

/**
     *     123<a
     *          ~
     *       ><b>
     */

/**
     *     123<!--
     *            ~
     *     -->
     */

/**
     *     123<span
     *             ~
     *       attr
     */

/**
     *     <img
     *       src="long"
     *                 ~
     *     />123
     */

/**
     *       Want to write us a letter? Use our<a
     *         ><b><a>mailing address</a></b></a
     *                                          ~
     *       >.
     */

/**
   *     123<a
   *       attr
   *           ~
   *       >456
   */

/**
   *     <span
   *       >123<meta
   *                ~
   *     /></span>
   */

/**
   *     <br />
   *        ^
   */

/**
   *     123<p
   *        ^^
   *     >
   */

/**
   *     <p
   *       >123
   *       ^
   *
   *     <p
   *       ><a
   *       ^
   */

/**
   *     <p></p
   *     >123
   *     ^
   *
   *     <p></p
   *     ><a
   *     ^
   */

/**
   *     <p
   *       ><a></a
   *       ></p
   *       ^
   *     >
   */

/**
   *     <p>
   *       123</p
   *          ^^^
   *     >
   *
   *         123</b
   *       ></a
   *        ^^^
   *     >
   */

// fall through

// use original concat to not break stripTrailingHardline

/**
         * do not break:
         *
         *     <div>{{
         *         ~
         *       interpolation
         *     }}</div>
         *            ~
         *
         * exception: break if the opening tag breaks
         *
         *     <div
         *       long
         *           ~
         *       >{{
         *         interpolation
         *       }}</div
         *              ~
         *     >
         */

/**
         *     <div>
         *       <pre>
         *         something
         *       </pre>
         *            ~
         *     </div>
         */

// replace the trailing literalline with hardline for better readability

// non-breaking whitespace: 0xA0

// may be formatted by multiparser

// lit-html: html`<my-element obj=${obj}></my-element>`

/**
     *     @click="jsStatement"
     *     @click="jsExpression"
     *     v-on:click="jsStatement"
     *     v-on:click="jsExpression"
     */

// angular does not allow trailing comma

/**
     *     *directive="angularDirective"
     */

// strictly prefer single quote to avoid unnecessary html entity escape

// If `lines` was whitespace only, return `null`.

// Lines are either whitespace only, or a comment (with poential whitespace

// around it). Drop whitespace-only lines.

// If a non-first comment is preceded by a blank (whitespace only) line,

// add in a blank line.

/**
 * Template literal in this context:
 * <style jsx>{`div{color:red}`}</style>
 */

/**
 * Angular Components can have:
 * - Inline HTML template
 * - Inline CSS styles
 *
 * ...which are both within template literals somewhere
 * inside of the Component decorator factory.
 *
 * E.g.
 * @Component({
 *  template: `<div>...</div>`,
 *  styles: [`h1 { color: blue; }`]
 * })
 */

/**
 * styled-components template literals
 */

// styled.foo``

// Component.extend``

// styled(Component)``

// styled.foo.attr({})``

// Component.extend.attr({)``

// styled(Component).attr({})``

// css``

/**
 * JSX element with CSS prop
 */

/*
 * react-relay and graphql-tag
 * graphql`...`
 * graphql.experimental`...`
 * gql`...`
 * GraphQL comment block
 *
 * This intentionally excludes Relay Classic tags, as Prettier does not
 * support Relay Classic formatting.
 */

// This checks for a leading comment that is exactly `/* GraphQL */`

// In order to be in line with other implementations of this comment tag

// we will not trim the comment value and we will expect exactly one space on

// either side of the GraphQL string

// Also see ./clean.js

// skip index/array

/**
 *     - html`...`
 *     - HTML comment block
 */

// Get full template literal with expressions replaced by placeholders

// Search all the placeholders in the quasisDoc tree

// and replace them with the expression docs one by one

// returns a new doc with all the placeholders replaced,

// or null if it couldn't replace any expression

// If placeholder is split, join it

/*
         * react-relay and graphql-tag
         * graphql`...`
         * graphql.experimental`...`
         * gql`...`
         *
         * This intentionally excludes Relay Classic tags, as Prettier does not
         * support Relay Classic formatting.
         */

// Bail out if any of the quasis have an invalid escape sequence

// (which would make the `cooked` value be `null` or `undefined`)

// Bail out if an interpolation occurs within a comment.

/**
         * md`...`
         * markdown`...`
         */

// We remove extra `;` and add them when needed

// We move text around, including whitespaces and add {" "}

// (TypeScript) Ignore `static` in `constructor(static p) {}`

// and `export` in `constructor(export p) {}`

// (TypeScript) ignore empty `specifiers` array

// (TypeScript) bypass TSParenthesizedType

// We convert <div></div> to <div />

// Remove raw and cooked values from TemplateElement when it's CSS

// styled-jsx

// We change {'key': value} into {key: value}

// CSS template literals in css prop

// Angular Components: Inline HTML template and Inline CSS styles

// styled-components, graphql, markdown

// There are often comments before the else clause of if statements like

//   if (1) { ... }

//   // comment

//   else { ... }

// They are being attached as leading comments of the BlockExpression which

// is not well printed. What we want is to instead move the comment inside

// of the block and make it leadingComment of the first element of the block

// or dangling comment of the block if there is nothing inside

//   else {

//     // comment

//     ...

//   }

// Comments before `else`:

// - treat as trailing comments of the consequent, if it's a BlockStatement

// - treat as a dangling comment otherwise

// For comments positioned after the condition parenthesis in an if statement

// before the consequent without brackets on, such as

// if (a) /* comment */ true,

// we look at the next character to see if the following node

// is the consequent for the if statement

// We unfortunately have no way using the AST or location of nodes to know

// if the comment is positioned before the condition parenthesis:

//   if (a /* comment */) {}

// The only workaround I found is to look at the next character to see if

// it is a ).

//   while (a /* comment */) {}

// Same as IfStatement but for TryStatement

// This is only needed for estree parsers (flow, typescript) to attach

// after a method name:

// obj = { fn /*comment*/() {} };

// special Property case: { key: /*comment*/(value) };

// comment should be attached to value instead of key

// Print comments between decorators and class methods as a trailing comment

// on the decorator node instead of the method node

// Type definitions functions

// Real functions

// With Flow the enclosingNode is undefined so use the AST instead.

// Only add dangling comments to fix the case when no params are present,

// i.e. a function without any argument.

// https://flow.org/en/docs/types/comments/

// Syntax example: const r = new (window.Request /*: Class<Request> */)("");

// If the value of this path is some child of a Node and not a Node

// itself, then it doesn't need parentheses. Only Node objects (in

// fact, only Expression nodes) need parentheses.

// Only statements don't need parentheses.

// Closure compiler requires that type casted expressions to be surrounded by

// https://github.com/google/closure-compiler/wiki/Annotating-Types#type-casts

// Syntax example: var x = /** @type {string} */ (fruit);

// for sub-item: /** @type {array} */ (numberOrString).map(x => x);

// Preserve parens if we have a Flow annotation comment, unless we're using the Flow

// parser. The Flow parser turns Flow comments into type annotation nodes in its

// AST, which we handle separately.

// Identifiers never need parentheses.

// Add parens around the extends clause of a class. It is needed for almost

// all expressions.

// these have parens added anyway

/* forbidFunctionClassAndDoExpr */

// else fallthrough

// Delegate to inner TSParenthesizedType

// Although parentheses wouldn't hurt around sequence

// expressions in the head of for loops, traditional style

// dictates that e.g. i++, j++ should not be wrapped with

// We do need parentheses, but SequenceExpressions are handled

// specially when printing bodies of arrow functions.

// Otherwise err on the side of overparenthesization, adding

// explicit exceptions above if this proves overzealous.

// We should check ancestor's parent to know whether the parentheses

// are really needed, but since ??T doesn't make sense this check

// will almost never be true.

// TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2

// See corresponding workaround in printer.js case: "Literal"

// To avoid becoming a directive

// Not strictly necessary, but it's clearer to the reader if IIFEs are wrapped in parentheses.

// This is basically a kind of IIFE.

// based on https://github.com/prettier/prettier/blob/master/src/language-html/syntax-vue.js isVueEventBindingExpression()

// Flow annotation comments cannot be split across lines. For example:

// (this /*

// : any */).foo = 5;

// is not picked up by Flow (see https://github.com/facebook/flow/issues/7050), so

// removing the newline would create a type annotation that the user did not intend

// to create.

/**
 * The following is the shared logic for
 * ternary operators, namely ConditionalExpression
 * and TSConditionalType
 * @typedef {Object} OperatorOptions
 * @property {() => Array<string | Doc>} beforeParts - Parts to print before the `?`.
 * @property {(breakClosingParen: boolean) => Array<string | Doc>} afterParts - Parts to print after the conditional expression.
 * @property {boolean} shouldCheckJsx - Whether to check for and print in JSX mode.
 * @property {string} conditionalNodeType - The type of the conditional expression node, ie "ConditionalExpression" or "TSConditionalType".
 * @property {string} consequentNodePropertyName - The property at which the consequent node can be found on the main node, eg "consequent".
 * @property {string} alternateNodePropertyName - The property at which the alternate node can be found on the main node, eg "alternate".
 * @property {string} testNodePropertyName - The property at which the test node can be found on the main node, eg "test".
 * @property {boolean} breakNested - Whether to break all nested ternaries when one breaks.
 * @param {FastPath} path - The path to the ConditionalExpression/TSConditionalType node.
 * @param {Options} options - Prettier options
 * @param {Function} print - Print function to call recursively
 * @param {OperatorOptions} operatorOptions
 * @returns Doc
 */

// If we have nested conditional expressions, we want to print them in JSX mode

// if there's at least one JSXElement somewhere in the tree.

// A conditional expression chain like this should be printed in normal mode,

// because there aren't JSXElements anywhere in it:

// isA ? "A" : isB ? "B" : isC ? "C" : "Unknown";

// But a conditional expression chain like this should be printed in JSX mode,

// because there is a JSXElement in the last ConditionalExpression:

// isA ? "A" : isB ? "B" : isC ? "C" : <span className="warning">Unknown</span>;

// This type of ConditionalExpression chain is structured like this in the AST:

// ConditionalExpression {

//   test: ...,

//   consequent: ...,

//   alternate: ConditionalExpression {

//     test: ...,

//     consequent: ...,

//     alternate: ConditionalExpression {

//       test: ...,

//       consequent: ...,

//       alternate: ...,

//     }

// We want to traverse over that shape and convert it into a flat structure so

// that we can find if there's a JSXElement somewhere inside.

// Given this code:

// // Using a ConditionalExpression as the consequent is uncommon, but should

// // be handled.

// A ? B : C ? D : E ? F ? G : H : I

// which has this AST:

//   test: Identifier(A),

//   consequent: Identifier(B),

//     test: Identifier(C),

//     consequent: Identifier(D),

//       test: Identifier(E),

//       consequent: ConditionalExpression {

//         test: Identifier(F),

//         consequent: Identifier(G),

//         alternate: Identifier(H),

//       },

//       alternate: Identifier(I),

// we should return this Array:

// [

//   Identifier(A),

//   Identifier(B),

//   Identifier(C),

//   Identifier(D),

//   Identifier(E),

//   Identifier(F),

//   Identifier(G),

//   Identifier(H),

//   Identifier(I)

// ];

// This loses the information about whether each node was the test,

// consequent, or alternate, but we don't care about that here- we are only

// flattening this structure to find if there's any JSXElements inside.

// Detect an expression node representing `{" "}`

// Even though they don't need parens, we wrap (almost) everything in

// parens when using ?: within JSX, because the parens are analogous to

// curly braces in an if statement.

// The only things we don't wrap are:

// * Nested conditional expressions in alternates

// * null

// normal mode

// We want a whole chain of ConditionalExpressions to all

// break if any of them break. That means we should only group around the

// outer-most ConditionalExpression.

// Break the closing paren to keep the chain right after it:

// (a

//   ? b

//   : c

// ).call()

/**
       *     a
       *       ? b
       *       : multiline
       *         test
       *         node
       *       ^^ align(2)
       *       ? d
       *       : e
       */

/** identify if an angular expression seems to have side effects */

// Just in case the AST has been modified to contain falsy

// "statements," it's safer simply to skip them.

// Skip printing EmptyStatement nodes to avoid leaving stray

// semicolons lying around.

// in no-semi mode, prepend statement with semicolon if it might break ASI

// don't prepend the only JSX element in a program with semicolon

// this isn't actually possible yet with most parsers available today

// so isn't properly tested yet.

// Babylon

// This recurses the return argument, looking for the first token

// (the leftmost leaf node) and, if it (or its parents) has any

// leadingComments, returns true (so it can be wrapped in parens).

// RxJS, Ramda

// Ramda

// Ramda, Redux

// Not from any library, but common in Haskell, so supported

// Lodash

// Redux

/* sameIndent */

// We want to get

//    pipe(

//      x => x + 1,

//      x => x - 1

//    )

// here, but not

//    process.stdout.pipe(socket)

// If the last two arguments are of the same type,

// disable last element expansion.

// We want to print the last argument with a special flag

// If the parent is a call with the first/last argument expansion and this is the

// params of the first/last argument, we dont want the arguments to break and instead

// want the whole expression to be on a new line.

// Good:                 Bad:

//   verylongcall(         verylongcall((

//     (a, b) => {           a,

//     }                     b,

//   })                    ) => {

//                         })

// Single object destructuring should hug

// function({

//   a,

//   b,

//   c

// }) {}

// don't break in specs, eg; `it("should maintain parens around done even when long", (done) => {})`

// Hack to differentiate between the following two which have the same ast

// declare function f(a): void;

// var f: (a) => void;

// prepend colon to TypeScript type annotation

// The return type will already add the colon, but otherwise we

// need to do it ourselves

// If the parent node has type DeclareExportDeclaration, then it

// will be responsible for printing the "declare" token. Otherwise

// it needs to be printed with this non-exported declaration node.

// Babylon 7.0 currently uses variance node type, and flow should

// follow suit soon:

// https://github.com/babel/babel/issues/4722

// for TypeParameterDeclaration typeParameters is a single node

// Keep old behaviour of extends in same line

// If there is only on extends and there are not comments

// We detect calls on member expressions specially to format a

// common pattern better. The pattern we are looking for is this:

// arr

//   .map(x => x + 1)

//   .filter(x => x > 10)

//   .some(x => x % 2)

// The way it is structured in the AST is via a nested sequence of

// MemberExpression and CallExpression. We need to traverse the AST

// and make groups out of it to print it in the desired way.

// Only space, newline, carriage return, and tab are treated as whitespace

// inside JSX.

// Meaningful if it contains non-whitespace characters,

// or it contains whitespace without a new line.

// JSX Children are strange, mostly for two reasons:

// 1. JSX reads newlines into string values, instead of skipping them like JS

// 2. up to one whitespace between elements within a line is significant,

//    but not between lines.

// Leading, trailing, and lone whitespace all need to

// turn themselves into the rather ugly `{' '}` when breaking.

// We print JSX using the `fill` doc primitive.

// This requires that we give it an array of alternating

// content and whitespace elements.

// To ensure this we add dummy `""` content elements as needed.

// For binary expressions to be consistent, we need to group

// subsequent operators with the same precedence level under a single

// group. Otherwise they will be nested such that some of them break

// onto new lines but not all. Operators with the same precedence

// level should either all break or not. Because we group them by

// precedence level and the AST is structured based on precedence

// level, things are naturally broken up correctly, i.e. `&&` is

// broken before `+`.

// type T = { method: () => void };

// type T = { method(): void };

// do not put values on a separate line from the key in json

// TODO: This is a bad hack and we need a better way to distinguish between

// arrow functions and otherwise

// This is a bit aggressive but captures Array<{x}>

// eg; `describe("some string", (done) => {})`

// `inject` is used in AngularJS 1.x, `async` in Angular 2+

// example: https://docs.angularjs.org/guide/unit-testing#using-beforeall-

// it("name", () => { ... }, 2500)

// Print @babel/parser's InterpreterDirective here so that

// leading comments on the `Program` node get printed after the hashbang.

// Babel 6

// Only force a trailing newline if there were any contents.

// Babel extension.

// Detect Flow-parsed directives

// Do not append semicolon after the only JSX element in a program

// We treat BinaryExpression and LogicalExpression nodes the same.

// Put all operators with the same precedence level in the same

// group. The reason we only need to do this with the `left`

// expression is because given an expression like `1 + 2 - 3`, it

// is always parsed like `((1 + 2) - 3)`, meaning the `left` side

// is where the rest of the expression will exist. Binary

// expressions on the right side mean they have a difference

// precedence level and should be treated as a separate group, so

// print them normally. (This doesn't hold for the `**` operator,

// which is unique in that it is right-associative.)

// Flatten them out by recursively calling this function.

/* isNested */

// The root comments are already printed, but we need to manually print

// the other ones since we don't call the normal print on BinaryExpression,

// only for the left and right parts

// Our stopping case. Simply print the node normally.

//   if (

//     this.hasPlugin("dynamicImports") && this.lookahead().type === tt.parenLeft

//   ) {

// looks super weird, we want to break the children if the parent breaks

//     this.hasPlugin("dynamicImports") &&

//     this.lookahead().type === tt.parenLeft

// Break between the parens in unaries or in a member expression, i.e.

//   (

//     a &&

//     b &&

//     c

//   ).call()

// Avoid indenting sub-expressions in some cases where the first sub-expression is already

// indented accordingly. We should indent sub-expressions where the first case isn't indented.

// If the right part is a JSX node, we include it in a separate group to

// prevent it breaking the whole chain, so we can print the expression like:

//   foo && bar && (

//     <Foo>

//       <Bar />

//     </Foo>

//   )

// Don't include the initial expression in the indentation

// level. The first item is guaranteed to be the first

// left-most expression.

/* expandLast */

/* printTypeParams */

// We want to always keep these types of nodes on the same line

// as the arrow.

// We handle sequence expressions as the body of arrows specially,

// so that the required parentheses end up on their own lines.

// if the arrow function is expanded as last argument, we are adding a

// level of indentation and need to add a softline to align the closing )

// with the opening (, or if it's inside a JSXExpression (e.g. an attribute)

// we should align the expression's closing } with the line with the opening {.

/* forbidFunctionAndClass */

// import {} from 'x'

// We want to keep CommonJS- and AMD-style require calls, and AMD-style

// define calls, as a unit.

// e.g. `define(["some/lib", (lib) => {`

// Template literals as single arguments

// Keep test declarations on a single line

// e.g. `it('long name', () => {`

// Inline Flow annotation comments following Identifiers in Call nodes need to

// stay with the Identifier. For example:

// foo /*:: <SomeGeneric> */(bar);

// Here, we ensure that such comments stay between the Identifier and the Callee.

// We detect calls on member lookups and possibly print them in a

// special chain format. See `printMemberChain` for more info.

// The first phase is to linearize the AST by traversing it down.

//   a().b()

// has the following AST structure:

//   CallExpression(MemberExpression(CallExpression(Identifier)))

// and we transform it into

//   [Identifier, CallExpression, MemberExpression, CallExpression]

// Here we try to retain one typed empty line after each call expression or

// the first group whether it is in parentheses or not

// if it is cut off by a parenthesis, we only account for one typed empty

// line after that parenthesis

// Note: the comments of the root node have already been printed, so we

// need to extract this first call without printing them as they would

// if handled inside of the recursive call.

// Once we have a linear list of printed nodes, we want to create groups out

// of it.

//   a().b.c().d().e

// will be grouped as

//   [

//     [Identifier, CallExpression],

//     [MemberExpression, MemberExpression, CallExpression],

//     [MemberExpression, CallExpression],

//     [MemberExpression],

//   ]

// so that we can print it as

//   a()

//     .b.c()

//     .d()

//     .e

// The first group is the first node followed by

//   - as many CallExpression as possible

//       < fn()()() >.something()

//   - as many array acessors as possible

//       < fn()[0][1][2] >.something()

//   - then, as many MemberExpression as possible but the last one

//       < this.items >.something()

// Then, each following group is a sequence of MemberExpression followed by

// a sequence of CallExpression. To compute it, we keep adding things to the

// group until we has seen a CallExpression in the past and reach a

// MemberExpression

// [0] should be appended at the end of the group instead of the

// beginning of the next one

// There are cases like Object.keys(), Observable.of(), _.values() where

// they are the subject of all the chained calls and therefore should

// be kept on the same line:

//   Object.keys(items)

//     .filter(x => x)

//     .map(x => x)

// In order to detect those cases, we use an heuristic: if the first

// node is an identifier with the name starting with a capital

// letter or just a sequence of _$. The rationale is that they are

// likely to be factories.

// In case the Identifier is shorter than tab width, we can keep the

// first call in a single line, if it's an ExpressionStatement.

//   d3.scaleLinear()

//     .domain([0, 100])

//     .range([0, width]);

// Checks if the next node (i.e. the parent node) needs parens

// and print accordingly

// If we only have a single `.`, we shouldn't do anything fancy and just

// render everything concatenated together.

// Find out the last node in the first group and check if it has an

// empty line after

// We don't want to print in one line if there's:

//  * A comment.

//  * 3 or more chained calls.

//  * Any group but the last one has a hard line.

// If the last group is a function it's okay to inline if it fits.

/**
   *     scopes.filter(scope => scope.value !== '').map((scope, i) => {
   *       // multi line content
   *     })
   */

// We only need to check `oneLine` because if `expanded` is chosen

// that means that the parent group has already been broken

// naturally

// If we inline the object as first argument of the parent, we don't want

// to create another group so that the object breaks before the return

// type

// Non-standard AST node type.

// For ExpressionStatements and for-loop heads, which are among

// the few places a SequenceExpression appears unparenthesized, we want

// to indent expressions after the first.

// Babel 6 Literal split

// See corresponding workaround in needs-parens.js

// We generally want to terminate all variable declarations with a

// semicolon, except when they in the () part of for loops.

// Indent first var to comply with eslint one-var rule

/* sameLine */

// We want to keep dangling comments above the loop to stay consistent.

// Any comment positioned between the for statement and the parentheses

// is going to be printed before the statement.

// Note: esprima can't actually parse "for each (".

// Babylon 7 removed ForAwaitStatement in favor of ForOfStatement

// with `"await": true`:

// https://github.com/estree/estree/pull/138

// Note: ignoring n.lexical because it has no printing consequences.

// JSX extensions below.

// Unescape all quotes so we get an accurate preferred quote

// JSX expands children from the inside-out, instead of the outside-in.

// This is both to break children before attributes,

// and to ensure that when children break, their parents do as well.

// Any element that is written without any newlines and fits on a single line

// is left that way.

// Not only that, any user-written-line containing multiple JSX siblings

// should also be kept on one line if possible,

// so each user-written-line is wrapped in its own group.

// Elements that contain newlines or don't fit on a single line (recursively)

// are fully-split, using hardline and shouldBreak: true.

// To support that case properly, all leading and trailing spaces

// are stripped from the list of children, and replaced with a single hardline.

// Turn <div></div> into <div />

// if there is one text child and does not contain any meaningful text

// we can treat the element as empty.

// Convert `{" "}` to text nodes containing a space.

// This makes it easy to turn them into `jsxWhitespace` which

// can then print as either a space or `{" "}` when breaking.

// We can end up we multiple whitespace elements with empty string

// content between them.

// We need to remove empty whitespace and softlines before JSX whitespace

// to get the correct output.

// using `map` instead of `each` because it provides `i`

// Contains a non-whitespace character

// Starts with whitespace

// This was whitespace only without a new line.

// Ends with whitespace

// Keep (up to one) blank line between tags/expressions/text.

// Note: We don't keep blank lines between text elements.

// Trim trailing lines (or empty strings)

// Trim leading lines (or empty strings)

// Tweak how we format children if outputting this element over multiple lines.

// Also detect whether we will force this element to output over multiple lines.

// There are a number of situations where we need to ensure we display

// whitespace as `{" "}` when outputting this element over multiple lines.

// Solitary whitespace

// Leading whitespace

// Trailing whitespace

// Whitespace after line break

// If there is text we use `fill` to fit as much onto each line as possible.

// When there is no text (just tags and expressions) we use `group`

// to output each on a separate line.

// Don't break self-closing elements with no attributes and no comments

// don't break up opening elements with a single long text attribute

// We should break for the following cases:

// <div

//   attr="value"

// >

// Simple tags (no attributes and no comment in tag name) should be

// kept unbroken regardless of `jsxBracketSameLine`

// We should print the bracket in a new line for the following cases:

//   attr // comment

/**
           * a    | b    | expected
           * ${1} | ${1} | ${2}
           * ${1} | ${2} | ${3}
           * ${2} | ${1} | ${3}
           */

// For a template literal of the following form:

//   `someQuery {

//     ${call({

//       a,

//       b,

//     })}

//   }`

// the expression is on its own line (there is a \n in the previous

// quasi literal), therefore we want to indent the JavaScript

// expression inside at the beginning of ${ instead of the beginning

// of the `.

// These types are unprintable because they serve as abstract

// supertypes for other (printable) types.

// Type Annotations for Facebook Flow, typically stripped out or

// transformed away before printing.

// TypeScript doesn't support trailing commas in tuple types

// For TypeScript the DeclareFunction node shares the AST

// structure with FunctionDeclaration

// FunctionTypeAnnotation is ambiguous:

// declare function foo(a: B): void; OR

// var A: (a: B) => void;

/* expandArg */

// The returnType is not wrapped in a TypeAnnotation, so the colon

// needs to be added separately.

// If both are objects, don't indent

// If you go from object to non-object or vis-versa, then inline it

// If no object is involved, go to the next line if it breaks

// single-line variation

// A | B | C

// multi-line variation

// | A

// | B

// | C

// Flow supports a comment syntax for specifying type annotations: https://flow.org/en/docs/types/comments/.

// Unfortunately, its parser doesn't differentiate between comment annotations and regular

// annotations when producing an AST. So to preserve parentheses around type casts that use

// the comment syntax, we need to hackily read the source itself to see if the code contains

// a type annotation comment.

// Note that we're able to use the normal whitespace regex here because the Flow parser has

// already deemed this AST node to be a type cast. Only the Babylon parser needs the

// non-line-break whitespace regex, which is why hasFlowShorthandAnnotationComment() is

// implemented differently.

// Unhandled types below. If encountered, nodes of these types should

// be either left alone or desugared into AST types that are fully

// supported by the pretty-printer.

// This isn't valid semantically, but it's in the AST so we can print it.

// Global declaration looks like this:

// (declare)? global { ... }

// If the parent node is an export declaration and the decorator

// was written before the export, the export will be responsible

// for printing the decorators.

// Only print decorators here if they were written before the export,

// otherwise they are printed by the node.declaration

// Export declarations are responsible for printing any decorators

// that logically apply to node.declaration.

// Nodes with decorators can't have parentheses, so we can avoid

// computing pathNeedsParens() except in this case.

// Lookup the previous sibling, ignoring any empty JSXText elements

// If the comment has multiple lines and every line starts with a star

// we can fix the indentation of each line. The stars in the `/*` and

// `*/` delimiters are not included in the comment value, so add them

// back first.

// We need to prevent an edge case of a previous trailing comment

// printed as a `lineSuffix` which causes the comments to be

// interleaved. See https://github.com/prettier/prettier/issues/4412

// Print shebangs with the proper comment characters

// .json file defaults to json instead of json-stringify

/**
 * split text into whitespaces and words
 * @param {string} text
 * @return {Array<{ type: "whitespace", value: " " | "\n" | "" } | { type: "word", value: string }>}
 */

// whitespace

// word separated by whitespace

// non-CJK word

// CJK character

// workaround for https://github.com/remarkjs/remark/issues/351

// leading and trailing newlines are stripped by remark

// only look for the first string so as to support [markdown-preview-enhanced](https://shd101wyy.github.io/markdown-preview-enhanced/#/code-chunk)

// MDX

// if one of its parents is not aligned, it's not possible to be aligned in sub-lists

/**
       * - 123
       * - 123
       */

/**
       * 1.   123
       *
       * 1.   123
       * 1. 123
       */

/**
       * 1.
       *
       * 1.
       * 1.
       */

/**
       * aligned:
       *
       * 11. 123
       *
       * not aligned:
       *
       * 1. 123
       */

/**
     * aligned:
     *
     * 11. 123
     * 1.  123
     *
     * not aligned:
     *
     * 1. 123
     * 2. 123
     */

// the first char may point to `\n`, e.g. `\n\t\tbar`, just ignore it

// no need to check checked items

// handle these cases in printer

/** @typedef {{ index: number, offset: number }} IgnorePosition */

/** @type {Array<{start: IgnorePosition, end: IgnorePosition}>} */

/** @type {IgnorePosition | null} */

/** @return {false | 'next' | 'start' | 'end'} */

// avoid escaped quotes

// faster than using RegExps: https://jsperf.com/performance-of-match-vs-split

// escape all `_` except concating with non-punctuation, e.g. `1_2_3` is not considered emphasis

// leading char that may cause different syntax

// `1*2*3` is considered emphais but `1_2_3` is not

// <hello@example.com> is parsed as { url: "mailto:hello@example.com" }

// indented code block

// fenced code block

/* workaround for https://github.com/remarkjs/remark/issues/315 */

// { [rowIndex: number]: { [columnIndex: number]: string } }

// fallback to the original text if multiparser failed

// remark-math trims content but we don't want to remove whitespaces

// since it's very possible that it's recognized as math accidentally

// handled in "table"

// handled in "list"

// texts can be splitted or merged

// for codeblock

// for insert pragma

// TODO: use linguist data

/**
 * @param {any} value
 * @param {string[]=} types
 */

/**
 * " a   b c   d e   f " -> [" a   b", "c   d", "e   f "]
 */

// disallow trailing spaces

// next empty line

// trailing backslash in quoteDouble should be preserved

// there's already a newline printed at the end of blockValue (chomping=keep, lastDescendant=true)

// an extra newline for better readability

// only quoteDouble can use escape chars

// and quoteSingle do not need to escape backslashes

// single quote needs to be escaped by 2 single quotes in quoteSingle

// force singleline

/**
     *... # trailingComment
     */

/**
     * ...
     * %DIRECTIVE
     * ---
     */

/**
     * ...
     * # endComment
     * ---
     */

/**
   * ---
   * preserve the first document head end marker
   */

/**
   * %DIRECTIVE
   * ---
   */

/**
   * # end comment
   * ---
   */

/**
   * --- # trailing comment
   */

// backslash-newline

/*, parent */

// insert pragma

// Luckily `opts` is always the 2nd argument

/* 19 */

/* 20 */

/* 21 */

/**
   * @constructs StructuredSource
   * @param {string} source - source code text.
   */

/* '\r' */

/* '\n' */

// If there's a last line terminator, we push it to the indice.

// So use < instead of <=.

/* 22 */

/*
  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* 23 */

// Hack to prevent formatting override inside code blocks (block and inline)

// If this block is changed, it may need to be updated in Markdown mode

// Check if space. If so, links can be formatted later on

// User/Project@SHA

// User@SHA

// SHA

// User/Project#Num

// User#Num

// #Num

// URLs

// Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls

// And then (issue #1160) simplified to make it not crash the Chrome Regexp engine

// And then limited url schemes to the CommonMark list, so foo:bar isn't matched as a URL

/* 24 */

/* 25 */

// An optional function that takes a {string} token and returns true if it

// should be treated as a builtin.

// Do not use this. Use the cTypes function below. This is global just to avoid

// excessive calls when cTypes is being called multiple times during a parse.

// Returns true if identifier is a "C" type.

// C type is defined as those that are reserved by the compiler (basicTypes),

// and those that end in _t (Reserved by POSIX for types)

// http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html

// Returns true if identifier is a "Objective C" type.

// For C and C++ (and ObjC): identifiers starting with __

// or _ followed by a capital letter are reserved for the compiler.

// Raw strings.

// Unicode strings/chars.

/* eat */

// Ignore this hook.

// C#-style strings where "" escapes a quote.

// C++11 raw string literal is <prefix>"<delim>( anything )<delim>", where

// <delim> can be a string up to 16 characters long.

// Escape characters that have special regex meanings.

// Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.

// Don't match the @interface keyword.

/* scala */

/*keywords*/

/* package java.lang */

// Ceylon Strings need to deal with interpolation

// In Ceylon all identifiers that start with an uppercase are types

/* 26 */

// Auto-updating Markdown list numbers when a new item is added to the

// middle of a list

// This doesn't run if the next line immediatley indents, as it is

// not clear of the users intention (new indented item or same level)
